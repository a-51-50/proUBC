---
openapi: 3.0.0
info:
  title: Baseline API
  description: OASIS standard API specification for the Baseline Protocol
  license:
    name: CC0 1.0 Universal License
    url: https://raw.githubusercontent.com/ethereum-oasis/baseline-standard/main/LICENSE
  version: v1.0.0
servers:
  - url: https://baseline.provide.network
    description: Provide Baseline Operator
  - url: http://localhost:8080
    description: Local Baseline Integration Stack
  - url: http://localhost:9999
    description: Local BRI-1 Stack
security:
  - bearerAuth: []
tags:
  - name: .well-known
    description: /.well-known path
  - name: Authn/authz
    description: Authentication and authorization
  - name: DLT
    description: Baseline core DLT API provides interfaces for general interaction with the underlying layer 1 mainnet.
  - name: Infrastructure
    description: Distributed infrastructure API provides cloud-agnostic C2.
  - name: Oracles
    description: Third party or distributed data feed services that provide external data into distributed networks.
  - name: Persistence
    description: Baseline core persistence provides internal integration middleware interfaces for baselining systems of record.
  - name: Privacy
    description: Baseline core privacy provides interfaces supporting general consistency, zero-knowledge cryptography protocols and MPC.
  - name: Registry
    description: Baseline core registry API provides interfaces for the organization registry.
  - name: Users
    description: Baseline core users API provides interfaces for creating and authorizing users.
  - name: Vault
    description: Baseline core vault API provides interfaces for secure management of cryptographic keys and secrets.
paths:
  /accounts:
    get:
      tags:
        - DLT
      summary: List accounts
      description: Retrieves a list of `Account` instances used for storing cryptocurrency or tokens on behalf of users managing cryptographic material (i.e., for signing transactions).
      operationId: ListAccounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: OK
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create account
      description: |-
        Creates an `Account` (also referred to as a signing identity) capable of storing cryptocurrencies and tokens native to a specific `Network`. 

        An `Account` may be setup as custodial or non-custodial, and may be derived
        from a `Wallet`. If the `Account` is custodial then the platform will sign and broadcast transactions to the
        `Network` on behalf of an authorized `User` or `Workgroup`.
      operationId: CreateAccount
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: The request was successful and a new `Account` was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Account'
        '4XX':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /accounts/{id}:
    get:
      tags:
        - DLT
      summary: Get account details
      description: Returns details for the specified `Account`
      operationId: GetAccountDetails
      parameters:
        - name: id
          in: path
          description: UUID of the target `Account`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /authenticate:
    post:
      tags:
        - Authn/authz
      summary: User authentication
      security: 
        - OAuth2:
            - offline_access
            - email
      description: |-
        Returns a `bearer` API token for the a specified `User`. 
        
        The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token to access one or more resources for which the Token was authorized. Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`.
      operationId: Authentication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
                
      deprecated: false
  /connectors:
    get:
      tags:
        - Infrastructure
      summary: List connectors
      description: Retrieves a list of `Connector` instances. Connectors are adapters that connect external arbitrary infrastructure with a baseline `Workgroup`. `Token` should be `Application` type.
      operationId: ListConnectors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    post:
      tags:
        - Infrastructure
      summary: Create connector
      description: Create a new `Connector` using the given configuration. `Token` should be `Application` type.
      operationId: CreateConnector
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Connector'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /connectors/{id}:
    get:
      tags:
        - Infrastructure
      summary: Get connector details
      description: Returns details for the target `Connector`
      operationId: GetConnectorDetails
      parameters:
        - name: id
          in: path
          description: UUID of the target `Connector`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Connector'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    delete:
      tags:
        - Infrastructure
      summary: Delete connector
      description: Deletes the specified `Connector`
      operationId: deleteConnector
      parameters:
        - name: id
          in: path
          description: UUID of the target `Connector`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response.
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /connectors/{id}/load_balancers:
    get:
      tags:
        - Infrastructure
      summary: Retrieve load balancer details
      description: Returns details for a specified `Load Balancer`
      operationId: GetLoadBalancerDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Load Balancer`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoadBalancer'
              example:
                id: 64d209eb-a09d-4e2c-939e-4985a8aba70a
                created_at: '2021-04-16T15:05:23.130Z'
                network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
                workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018fs
                name: ceeb3bca-3b92-44b9-8ac5-fdd4564
                type: provide
                host: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com'
                description: ceeb3bca-3b92-44b9-8ac5-fdd4564 - aws us-east-2
                region: us-east-2
                status: active
                config:
                  api_port: 8080
                  container: providenetwork-ipfs
                  image: provide/ident
                  load_balancer_name: ceeb3bca-3b92-44b9-8ac5-fdd4564
                  load_balancer_url: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaw.com
                  provider_id: docker
                  region: us-east-2
                  role: peer
                  security:
                    egress: '*'
                    ingress:
                      0.0.0.0/0:
                        tcp:
                          - 8080
                        udp: []
                  target_balancer_id: '''arn:aws:elasticloadbalancing:us-east-2:192663109025:loadbalancer/app/ceeb3bca-3b92-44b9-8ac5-fdd4564/8340a112fd942e75'''
                  target_id: aws
                  target_security_group_ids:
                    - sg-009a2c35c02c1ddc0
                  vpc_id: vpc-44df352f
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /contracts:
    get:
      tags:
        - DLT
      summary: List contracts
      description: Returns a list of smart contracts visible to an authorized `User` or `Workgroup`.
      operationId: ListContracts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: filter_tokens
          in: query
          description: flag to indicate if Token contracts should be filtered from the response. Default is true
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: sort
          in: query
          description: parameter to indicate how the response should be sorted; currently, recent is the only supported option and returns by accessed_at descending.
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Deploy contract
      description: Deploy a smart contract to the specified network
      operationId: DeployContract
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
            example:
              workgroup_id: bca2348c-442f-4c48-99a4-7b3510385e53
              network_id: ef976635-545b-46c6-9576-4e3a893a68e9
              name: Ekho
              address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
              params:
                account_id: efef1044-4958-43bc-903b-28f2bb938037
                compiled_artifact:
                  contractName: Ekho
                  abi:
                    - anonymous: false
                      inputs:
                        - indexed: false
                          internalType: bytes
                          name: message
                          type: bytes
                      name: Ekho
                      type: event
                    - inputs:
                        - internalType: bytes
                          name: message
                          type: bytes
                      name: broadcast
                      outputs: []
                      stateMutability: nonpayable
                      type: function
                  bytecode: 0x
                  source: |
                    contract Ekho {
                        event Ekho(bytes message);
                        function broadcast(bytes memory message) public {
                            emit Ekho(message);
                        }
                    }
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /contracts/{id}:
    get:
      tags:
        - DLT
      summary: Get contract detail
      description: Get contract details
      operationId: GetContractDetail
      parameters:
        - name: id
          in: path
          description: ID of target contract
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Contract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
  /contracts/{id}/execute:
    post:
      tags:
        - DLT
      summary: Execute contract
      description: Construct and execute a specific method in a smart contract.
      operationId: ExecuteContract
      parameters:
        - name: id
          in: path
          description: ID of contract being executed
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteContractRequest'
            example:
              method: broadcast
              params:
                - hello world
              value: 0
              account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
        required: true
      responses:
        '202':
          description: |
            The request was successfully accepted and processing will complete
            asynchronously.

            The API returns 202 Accepted if the contract execution will
            broadcast a Transaction to the network and returns a ref, which is
            an identifier you may use to ask for the execution status of the
            Transaction.
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ExecuteContract'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /networks:
    get:
      tags:
        - DLT
      summary: List networks
      description: List available peer-to-peer networks and related configuration details.
      operationId: ListNetworks
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - $ref: '#/components/parameters/public'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 5d38bb6c-3700-4774-baa5-7814ac4a91e3
                    created_at: 2021-03-11T19:14:21.209Z
                    workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
                    name: demo network
                    chain_id: 1615490061
                    config:
                      chain: test
                      engine_id: ethash
                      native_currency: TEST
                      network_id: 1615490061
                      platform: evm
                      protocol_id: pow
                items:
                  $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create network
      description: |-
        Configuring a new peer-to-peer network can be quite complex. Just how complex depends on the kind of network you intend to provision, and the clients and protocols you plan to support (both now, and in the future). Creating the configuration for a new logical network involves having deep understanding of your goals for the network and the underlying consensus and governance protocols. 

        We plan to curate some examples demonstrating how to configure extensible new EVM- and Bitcoin-based networks and will update this documentation accordingly.
      operationId: CreateNetwork
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
            example:
              name: Testnet
              cloneable: false
              config:
                native_currency: TEST
                platform: evm
                engine_id: ethash
                chain: test
                protocol_id: pow
                chainspec:
                  config:
                    homesteadBlock: 0
                    eip150Block: 0
                    eip155Block: 0
                    eip158Block: 0
                    byzantiumBlock: 0
                    constantinopleBlock: 0
                    petersburgBlock: 0
                  alloc: {}
                  coinbase: 0
                  difficulty: 131072
                  extraData: ''
                  gasLimit: 3141592
                  nonce: 66
                  mixhash: 0
                  parentHash: 0
                  timestamp: 0
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Network'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /networks/{id}:
    put:
      tags:
        - DLT
      summary: Update network
      description: Update a network
      operationId: UpdateNetwork
      parameters:
        - name: id
          in: path
          description: UUID of the target network. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
            example:
              name: Testnet
              cloneable: false
              config:
                native_currency: TEST
                platform: evm
                engine_id: ethash
                chain: test
                protocol_id: pow
                chainspec:
                  config:
                    homesteadBlock: 0
                    eip150Block: 0
                    eip155Block: 0
                    eip158Block: 0
                    byzantiumBlock: 0
                    constantinopleBlock: 0
                    petersburgBlock: 0
                  alloc: {}
                  coinbase: 0
                  difficulty: 131072
                  extraData: ''
                  gasLimit: 3141592
                  nonce: 66
                  mixhash: 0
                  parentHash: 0
                  timestamp: 0
      responses:
        '204':
          description: The request was successful but did not return a response
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /networks/{id}/status:
    get:
      tags:
        - DLT
      summary: Get network status
      description: Retrieve the syncing status and, if fully-synced, real-time network-specific metrics and metadata.'
      operationId: GetNetworkStatus
      parameters:
        - name: id
          in: path
          description: UUID of the target `Network`. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/NetworkStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
      deprecated: false
  /oracles:
    get:
      tags:
        - Oracles
      summary: List oracles
      description: Retrieve a list of `Oracle` contracts
      operationId: ListOracles
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Oracles
      summary: Create oracle
      description: Create an `Oracle`
      operationId: CreateOracle
      parameters: []
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /oracles/{id}:
    get:
      tags:
        - Oracles
      summary: Get oracle details
      description: Returns details for the target `Oracle`
      operationId: GetOracleDetail
      parameters:
        - name: id
          in: path
          description: ID of Oracle
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    put:
      tags:
        - Oracles
      summary: Update oracle
      description: Update an `Oracle`
      operationId: UpdateOracle
      parameters:
        - name: id
          in: path
          description: ID of Oracle
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    delete:
      tags:
        - Oracles
      summary: Delete oracle
      description: Delete specified oracle
      operationId: DeleteOracle
      parameters:
        - name: id
          in: path
          description: ID of oracle
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /organizations:
    get:
      tags:
        - Registry
      summary: List organizations
      description: Retrieves a list of `Organization` instances in the authorized scope
      operationId: ListOrganizations
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Create organization
      description: Creates a new `Organization`
      operationId: CreateOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '201':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /organizations/{id}:
    get:
      tags:
        - Registry
      summary: Get organization details
      description: Retrieve `Organization` details
      operationId: GetOrganizationDetails
      parameters:
        - name: id
          in: path
          description: ID of Organization
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    put:
      tags:
        - Registry
      summary: Update organization details
      description: Update an `Organization`
      operationId: UpdateOrganizationDetails
      parameters:
        - name: id
          in: path
          description: UUID of the `Organization` being updated. _UUID as specified by RFC4122_
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: The request was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /tokens:
    get:
      tags:
        - Authn/authz
      summary: List revocable tokens
      description: Retrieves a list of revocable tokens
      operationId: ListTokens
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Authn/authz
      summary: Token authorization
      description: Authorizes a Token on behalf of a `User`, `Application` or `Organization`. Returns an authorized JSON formatted JWT with an `offline-access` scoped long-term `access_token` that serves as authentication for `User`,`Organization`, and `Workgroup` related requests. To authorize a `Workgroup` token, replace `organization_id` in this example with `workgroup_id`.To authorize a `User` token, replace `organization_id` with `user_id`.
      operationId: TokenAuthorization
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
            example:
              scope: offline_access
              organization_id: cfdc122c-5c06-43e3-a478-f3d169f123a9
        required: true
      responses:
        '201':
          description: Request successfully authorized a `Token`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /tokens/{id}:
    delete:
      tags:
        - Authn/authz
      summary: Revoke token
      description: Revokes a previously-authorized Token
      operationId: RevokeToken
      parameters:
        - name: id
          in: path
          description: ID of target token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /transactions:
    get:
      tags:
        - DLT
      summary: List transactions
      description: Retrieves a list of `Transactions` scoped to the authorized `User` or `Application`
      operationId: ListTransactions
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: filter_contract_creations
          in: query
          description: when true, contract creation transactions are filtered
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: status
          in: query
          description: comma-delimited list of statuses by which the transactions response is filtered.
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create transaction
      description: >
        Create and broadcast a transaction in a chain- and protocol-agnostic manner.


        This API provides an asynchronous, fault-tolerant mechanism for providing some guarantees about how a well-formed transaction will become eventually-consistent with the underlying target Network. Currently, transactions are guaranteed to be successfully broadcast to the target network or timeout within 5 minutes. If a transaction is unable to be broadcast to the network for any reason (i.e., network reachability, invalid nonce etc.) it is retried every 60 seconds. It is likely these
        retry and timeout constraints will be made more configurable in a future release.


        In addition to the asynchronous and resilient nature of broadcasting transactions using this API, instrumentation of the full transaction lifecycle is captured for each transaction.
      operationId: CreateTransaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            example:
              network_id: ef976635-545b-46c6-9576-4e3a893a68e9
              key_id: e6ef498b-589e-4514-9924-278b7bd6e3de
              to: 1.0978071275383878e+48
              value: 0
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /transactions/{id}:
    get:
      tags:
        - DLT
      summary: Get transaction details
      description: Returns details for the target `Transaction`
      operationId: GetTransactionDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful

          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Retrieves a list of `User` instances in the authorized scope. A `User` may be associated with an `Application` and one or more `Organization` instances
      operationId: ListUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Users
      summary: Create user
      description: |-
        Create a new user

        [Privacy Policy](https://provide.services/privacy-policy)
      operationId: CreateUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              first_name: Joe
              last_name: User
              email: usr@baseline.local
              password: s3cr37
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      deprecated: false
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user detail
      description: Returns details for the target `User`
      operationId: GetUserDetail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
    put:
      tags:
        - Users
      summary: Update user
      description: Update target `User`
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          description: ID of target `User`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: example@email.com
              first_name: Joe
              last_name: User
              password: '12345'
        required: true
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete target `User`
      operationId: DeleteUserRequest
      parameters:
        - name: id
          in: path
          description: ID of target `User`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Target `User` deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /unseal:
    post:
      tags:
        - Vault
      summary: Unseal vault
      description: >
        One sealing key is valid for all vaults within a single instance. The SEAL_UNSEAL_VALIDATION_HASH  environment variable contains a SHA-256 hash of the 256-bit entropy BIP39 seed phrase used for the seal/unseal key. When a valid sealing key is presented to the vault (i.e. one that has the same SHA-256 hash value as the SEAL_UNSEAL_VALIDATION_HASH environment variable), the seal/unseal key will then be cloaked (i.e., encrypted with a random, ephemeral, in-memory cloaking key) in memory and
        decrypted only when required for operations by the cloaking key.
      operationId: UnsealVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsealVaultRequest'
            example:
              key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
        required: true
      responses:
        '204':
          description: The request was successful but did not return a response
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 16 Apr 2021 15:21:28 GMT
          content: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults:
    get:
      tags:
        - Vault
      summary: List vaults
      description: List Vaults for the authorized context.
      operationId: ListVaults
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 174844e9-6767-49b2-afbd-11fba1361397
                    created_at: 2021-04-13T09:32:26.607Z
                    name: Sample Vault
                items:
                  $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a vault
      description: Create a `Vault` for authorized context
      operationId: CreateVault
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
            example:
              name: Test Vault
              description: Organizational keystore
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults/{id}/keys:
    get:
      tags:
        - Vault
      summary: List keys
      operationId: Listkeys
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: ID of target `Vault`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - id: 02e81595-ef57-4e71-8e27-1c8b2dfdefbf
                    created_at: 2021-04-17T21:07:16.098Z
                    vault_id: ae3c07d9-8a41-4cd3-92c0-e6358cbd516c
                    type: symmetric
                    usage: encrypt/decrypt
                    spec: ChaCha20
                    name: private chat
                    description: this is a secure channel
                items:
                  $ref: '#/components/schemas/Key'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Create a key
      operationId: CreateKey
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
            example:
              type: asymmetric
              usage: sign/verify
              spec: C25519
              name: 'c25519 key #1'
              description: c25519 key
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Key'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults/{id}/keys/{key_id}/derive:
    post:
      tags:
        - Vault
      summary: Derive a key
      description: Derives the target `Key`
      operationId: DeriveaKeyRequest
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: Name of derived `Key`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
            example:
              nonce: 1
              context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
              name: private chat
              description: this is a secure channel
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/DeriveKeyRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults/{id}/keys/{key_id}:
    delete:
      tags:
        - Vault
      summary: Delete a key
      description: ' Delete target `Key`'
      operationId: Deleteakey
      parameters:
        - name: id
          in: path
          description: ID of host `Vault`
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: ID of target `Key`
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults/{id}/secrets:
    get:
      tags:
        - Vault
      summary: List secrets
      operationId: ListSecrets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: ID of `Vault` containing at least 1 `Secret`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example: []
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Vault
      summary: Store secret
      operationId: StoreSecret
      parameters:
        - name: id
          description: ID of target `Vault`
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
            example:
              name: 'secret #1'
              type: sample secret
              description: this secret is being stored for demonstration purposes
              value: mysecret :D
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /vaults/{id}/secrets/{secret_id}:
    get:
      tags:
        - Vault
      summary: Retrieve secret
      operationId: RetrieveSecret
      parameters:
        - name: id
          description: ID of `Vault` containing target `Secret`
          in: path
          required: true
          schema:
            type: string
        - name: secret_id
          description: ID of target `Secret`
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    delete:
      tags:
        - Vault
      summary: Delete secret
      operationId: DeleteSecret
      parameters:
        - name: id
          in: path
          description: ID of `Vault` containing target `Secret`
          required: true
          schema:
            type: string
        - name: secret_id
          in: path
          description: ID of target `Secret`
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request was successful but did not return a response
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /wallets:
    get:
      tags:
        - DLT
      summary: List wallets
      description: Retrieves a list of `Wallet` instances
      operationId: ListWallets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - DLT
      summary: Create wallet
      description: |
        Creates a `Wallet` in accordance with BIP32. A `Wallet` may be setup as custodial or non-custodial. If the Wallet is custodial then the platform will derive addresses and securely persist an `Account` for each of those derived addresses
      operationId: CreateWallet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
            example:
              purpose: 44
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /wallets/{id}/accounts:
    get:
      tags:
        - DLT
      summary: List wallet accounts
      description: Retrieves a list of `Account` instances for a target `Wallet`
      operationId: ListWalletAccounts
      parameters:
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: Wallet ID containing accounts
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          headers:
            X-Total-Results-Count:
              $ref: '#/components/headers/X-Total-Results-Count'
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
                    hd_derivation_path: m/44'/60'/0'/0/0
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /workgroups:
    get:
      tags:
        - Registry
      summary: List workgroups
      description: Retrieve a list of `Workgroup` instances in the authorized `scope`
      operationId: ListWorkgroups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workgroup'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Create workgroup
      description: |- 
        Creates a `Workgroup` with the  details provided in the request body. 
      operationId: CreateWorkgroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workgroup'
            example:
              name: AB Workgroup
        required: true
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workgroup'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /workgroups/{id}/users:
    get:
      tags:
        - Registry
      summary: List workgroup users
      description: Retrieves a list of `User` records associated with a target `Workgroup`
      operationId: ListWorkgroupUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/resultsPerPage'
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Registry
      summary: Associate workgroup user
      description: Associates a `User` to the target `Workgroup`
      operationId: AssociateWorkgroupUser
      parameters:
        - name: id
          in: path
          description: ID of target workgroup
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateWorkgroupUserRequest'
            example:
              user_id: 93a74e83-c7bf-4ef1-b25c-1bcc35c4aee7
        required: true
      responses:
        '201':
          description: The request was successful and a new entity was created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /workgroups/{id}:
    get:
      tags:
        - Registry
      summary: Get workgroup details
      description: Returns details for the specified `Workgroup`
      operationId: GetWorkgroupDetails
      parameters:
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    put:
      tags:
        - Registry
      summary: Update workgroup
      description: Updates the target `Workgroup`
      operationId: UpdateWorkgroup
      parameters:
        - name: id
          description: UUID of target `Workgroup`
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workgroup'
            example:
              name: ABD Workgroup
              description: Workgroup for baselining workflows
              type: Baseline
              hidden: true
      responses:
        '204':
          description: The request was successful but did not return a response
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
          
      deprecated: false
    delete:
      tags:
        - Registry
      summary: Delete workgroup
      description: Deletes the target `Workgroup`
      operationId: DeleteWorkgroup
      parameters:
        - name: id
          in: path
          description: ID of target `Workgroup`
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /business_objects:
    post:
      tags:
        - Persistence
      summary: Create a business object
      description: Creates a `BusinessObject`
      operationId: CreateBaselineBusinessObject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessObject'
            example:
              type: purchase_order
              id: '4500002427'
              payload:
                object: test
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Accepted'
              example:
                baseline_id: 4ea16bbd-a45e-4867-8ab0-f7e3e7e273ba
                opcode: BLINE
                identifier: b379d25f-b2fe-46fd-9a96-4d09523ef4ec
                type: purchase_order
                payload:
                  proof: 9aa07f220e52f86e78b5cb44399dd05a375413adc7a9b7ef3ae0e8b06ef0b2f2afff56a87d07cd23dad264e11a85601670aea91b3873a0475612910e72988cac0a64c540e5cccd203f80e10282cf64eaaa50883de88d771a46b9d48a55a14ca2d892365472a9c1f69c357a309f3e1b75c86c0b41f96a1b32d9af92f2ea3a00e4
                  type: purchase_order
                  witness:
                    Document.Hash: '17601414412062754957723647367357294356562802723216629399723598524672809368916'
                    Document.PreImage: '14065809565213763004053584111575847508071017910285712667024523677887390898151'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
      servers:
        - url: https://baseline.proxy/api/v1
  /business_objects/{id}:
    put:
      tags:
        - Persistence
      summary: Update a business object
      description: Updates the target `BusinessObject`
      operationId: UpdateBaselineBusinessObject
      parameters:
        - name: id
          in: path
          description: ID of target business object
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessObject'
            example:
              type: purchase_order
              id: '4500002427'
              payload:
                hello: world
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
      servers:
        - url: https://baseline.proxy/api/v1
  /circuits:
    get:
      tags:
        - Privacy
      summary: List Circuits
      description: Retrieves a list of `Circuit` instances.
      operationId: ListCircuits
      parameters:
        - name: curve
          in: query
          description: filter the response by elliptic curve
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: identifier
          in: query
          description: filter the response by identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: provider
          in: query
          description: filter the response by provider
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: proving scheme
          in: query
          description: filter the response by proving scheme
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: status
          in: query
          description: filter the response by the status
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Circuit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
    post:
      tags:
        - Privacy
      summary: Create circuit
      description: |
        Creates a baselined `Circuit`.

        You must provision a circuit before it can be used to generate and verify proofs. The foregoing holds true regardless of which provider, proving_scheme, curve and circuit identifier you specify (or source, if the raw source code of the `Circuit` is provided instead of an identifier).

        A powerful aspect of this API is the asynchronous nature by which computationally-intensive cryptographic operations are executed. The lifecycle of a zero-knowledge circuit depends largely on the chosen proving_scheme. For example, zkSNARK proving schemes (i.e., groth16) require a trusted setup whereas more modern schemes (i.e., plonk) do not.

        A persistent store is implicitly initialized upon the creation of a new circuit unless an existing store_id is provided and the referenced store is valid in the context of the circuit and authorized `scope`.
      operationId: CreateCircuit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Circuit'
            example:
              identifier: cubic
              proving_scheme: groth16
              curve: BN256
              provider: gnark
              name: my 1337 circuit
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /circuits/{id}/prove:
    post:
      tags:
        - Privacy
      summary: Prove circuit
      description: Once you have provisioned a circuit, this API can be used to generate a proof given valid witness parameters. Calling this API has an implicit side-effect of writing the hash of generated proof to the persistent store associated with the `Circuit`.
      operationId: Prove
      parameters:
        - name: id
          in: path
          description: ID of target circuit
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProveRequest'
            example:
              identifier: cubic
              proving_scheme: groth16
              curve: BN256
              provider: gnark
              name: my 1337 circuit
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required circuit arguments (i.e., fields) are not included within the given witness parameter or (iii) when Circuit constraints are not satisfied.
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /circuits/{id}/verify:
    post:
      tags:
        - Privacy
      summary: Verify
      description: Verify a `Proof` using the given `Witness` parameters.
      operationId: Verify
      parameters:
        - name: id
          in: path
          description: ID of target `Circuit`
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyProofRequest'
            example:
              witness:
                X: '3'
                'Y': '35'
              proof: 88b8d340795f4258c1f2c0ed8478b44859c90472af9ccdc5c54b02c85bcd879d9ddf3a3fb7c6926ea247c0b1c411abe2f5ba9c8deba60ab476428272767a761d1e14e343208024326429e361ebbc4c11daf5f16dbb7f7f4679cf85b17b59b1bdaa379a82ddab4dcbb7cd2bc32cdebadc6825c72d5f8e624f6d0f6b07906a8248
        required: true
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /circuits/{id}/store/{index}:
    get:
      tags:
        - Privacy
      summary: Retrieve store value
      description: Returns the store value of the specified `Circuit`. The store value is a hash of the proof
      operationId: GetStoreValue
      parameters:
        - name: id
          in: path
          description: ID of target `Circuit`
          required: true
          schema:
            type: string
        - name: index
          in: path
          description: The index of the leaf in the Merkle tree for the underlying data structure.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/InternalServerError'
      deprecated: false
  /.well-known/keys:
    get:
      tags:
        - .well-known
      summary: JSON Web Key Set (JWK)
      description: |-
        Returns JSON Web Key Set (JWK). 

        The JSON Web Key Set (JWK) is a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the RS256 signing algorithm.

        When creating applications and APIs in a Provide ecosystem, two algorithms are supported for signing JWTs: RS256 and HS256. RS256 generates an asymmetric signature, which means a private key must be used to sign the JWT and a different public key must be used to verify the signature.

        Provide uses the JSON Web Key (JWK) specification to represent the cryptographic keys used for signing RS256 tokens. This specification defines two high-level data structures: JSON Web Key (JWK) and JSON Web Key Set (JWKS).

        This endpoint will contain the JWK used to sign all issued JWTs for this tenant.
      operationId: ListWellKnownKeys
      parameters: []
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                example:
                  - kid: c5:eb:8d:59:44:38:63:06:c9:d3:e4:97:08:fb:68:9c
                    'n': >-

                    e: '10001'
                    fingerprint: e6:f7:d5:24:e2:59:06:2b:bc:a2:8c:35:9d:ca:0a:87
                    public_key: >-

                items:
                  $ref: '#/components/schemas/JWK'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /.well-known/openid-configuration:
    get:
      tags:
        - .well-known
      summary: Returns OpenID configuration
      description: |-
        Retrieves secret OpenID configuration. 

        Openid-configuration is a Well-known URI Discovery Mechanism for the Provider Configuration URI and is defined in OpenID Connect.

        Openid-configuration is a URI defined within OpenID Connect which provides configuration information about the Identity Provider (IDP).

        Openid-configuration is the OpenID Connect Provider's discovery document. The discovery document describes the provider's API endpoints used during the authentication sequence. Specifying this URL connects the authenticator to a particular OpenID Connect Provider. For Example, for Google (including Google Apps), the discovery document URL

        The Openid-configuration publishes a JSON object listing the Provider's OAuth 2.0 / OpenID Connect Endpoints as well as the supported grants, response types, authentication methods and security algorithms. These details are needed by clients and application developers to construct requests to the server.
      operationId: ListOpenIDConfiguration
      parameters: []
      responses:
        '200':
          description: The request was successful
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/OpenIDConfig'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
components:
  schemas:
    Account:
      title: Account
      type: object
      properties:
        id:
          description: UUID of the reference `Account`. _UUID as specified by RFC4122_
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Timestamp of `Account` creation
          format: date-time
          readOnly: true
        network_id:
          type: string
          description: UUID of host `Network`. _UUID as specified by RFC4122_
          format: uuid
        user_id:
          type: string
          description: UUID of `User` that created the `Account`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        vault_id:
          type: string
          description: UUID of the `Vault` that houses `Account` key. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        key_id:
          type: string
          description: UUID of the `Key` used to sign the `Account`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        public_key:
          type: string
          description: Public key of the `Account`
          readOnly: true
        address:
          type: string
          description: Address of the `Account`
          readOnly: true
    AssociateWorkgroupUserRequest:
      title: Associate Workgroup User Request
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
          description: UUID of `User` to be associated with `Workgroup`. _UUID as specified by RFC4122_
      example:
        user_id: 93a74e83-c7bf-4ef1-b25c-1bcc35c4aee7
    AuthenticationRequest:
      title: Authentication Request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email of User to be authenticated
        password:
          type: string
          description: Password of User to be authenticated
      example:
        email: joeusr@baseline.local
        password: s3cr37
    AuthenticationResponse:
      title: Authentication Response
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          $ref: '#/components/schemas/Token'
      example: 
        user:
          id: 7r19e831-43fd-237e-8b43-12af828ba3e3
          created_at: '2021-01-27T03:19:33.349Z'
          name: Joe User
          first_name: Joe
          last_name: User
          email: joeusr@baseline.local
          permissions: 415
          privacy_policy_agreed_at: '2021-01-27T03:19:33.349Z'
          terms_of_service_agreed_at: '2021-01-27T03:19:33.349Z'
        token:  
          id: 9d3ef7d2-044e-409a-889d-f90b49627f7e
          expires_in: 900
          token: <JWT>
          permissions: 415 
    BaselineRecord:
      title: Baseline Record
      type: object
      description: Represents a link between an object in the internal system of record and the external baseline workflow context
      properties:
        baseline_id:
          type: string
        id:
          type: string
        type:
          type: string
        identifier:
          type: string
          format: uuid
        workflow:
          $ref: '#/components/schemas/Workflow'
    BusinessObject:
      title: Business Object
      required:
        - id
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of business object being created
        id:
          type: string
      example:
        type: purchase_order
        id: '4500002427'
        payload:
          hello: world
    Chainspec:
      title: Chainspec
      required:
        - alloc
        - coinbase
        - config
        - difficulty
        - extraData
        - gasLimit
        - mixhash
        - nonce
        - parentHash
        - timestamp
      type: object
      properties:
        config: {}
        alloc:
          type: object
        coinbase:
          type: string
        difficulty:
          type: string
        extraData:
          type: string
        gasLimit:
          type: string
        nonce:
          type: string
        mixhash:
          type: string
        parentHash:
          type: string
        timestamp:
          type: string
      example:
        config:
          homesteadBlock: 0
          eip150Block: 0
          eip155Block: 0
          eip158Block: 0
          byzantiumBlock: 0
          constantinopleBlock: 0
          petersburgBlock: 0
        alloc: {}
        coinbase: 0
        difficulty: 131072
        extraData: ''
        gasLimit: 3141592
        nonce: 66
        mixhash: 0
        parentHash: 0
        timestamp: 0
    Circuit:
      title: Circuit
      type: object
      required:
        - curve
        - identifier
        - name
        - proving_scheme
        - provider
      properties:
        id:
          type: string
          format: uuid
          description: UUID for the `Circuit`. _UUID as specified by RFC4122_
        created_at:
          type: string
          description: Date and time of `Circuit` creation
        vault_id:
          type: string
          format: uuid
          description: UUID of host `Vault`. _UUID as specified by RFC4122_
        proving_key_id:
          type: string
          format: uuid
          description: UUID of `Key` used for proving the `Circuit`. _UUID as specified by RFC4122_
        verifying_key_id:
          type: string
          format: uuid
          description: UUID of `Key` used for verifying the `Circuit`. _UUID as specified by RFC4122_
        name:
          type: string
          description: User-defined name of `Circuit`
        description:
          type: string
          description: User-defined descriptor of the `Circuit`
        identifier:
          type: string
          description: Circuit identifier
          example: 'Cubic'
        provider:
          type: string
          description: Circuit provider. 
          example: 'gnark'
        proving_scheme:
          type: string
          description: Proving scheme to be used
          example: 'groth16'
        curve:
          type: string
          description: Pairing-friendly elliptic curve
          example: BN256
        status:
          type: string
        store_id:
          type: string
          description: Identifier of the persistent store instance
    CompiledArtifact:
      title: Compiled Artifact
      required:
        - abi
        - bytecode
        - contractName
        - source
      type: object
      properties:
        contractName:
          type: string
        Abi:
          type: array
          items: {}
        bytecode:
          type: string
        source:
          type: string
      example:
        contractName: Ekho
        abi:
          - anonymous: false
            inputs:
              - indexed: false
                internalType: bytes
                name: message
                type: bytes
            name: Ekho
            type: event
          - inputs:
              - internalType: bytes
                name: message
                type: bytes
            name: broadcast
            outputs: []
            stateMutability: nonpayable
            type: function
        bytecode: 0x
        source: |
          contract Ekho {
              event Ekho(bytes message);
              function broadcast(bytes memory message) public {
                  emit Ekho(message);
              }
          }
    Config:
      title: Config
      type: object
      properties:
        counterparties:
          $ref: '#/components/schemas/Participant'
        env:
          type: string
        errors:
          type: string
        network_id:
          type: string
        organization_address:
          type: string
        organization_id:
          type: string
        organization_refresh_token:
          type: string
        registry_contract_address:
          type: string
    Connector:
      title: Connector
      required:
        - name
        - network_id
        - type
      type: object
      properties:
        id:
          type: string
          description: UUID for the referenced `Connector`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Timestamp of `Connector` creation
          format: date-time
          readOnly: true
        workgroup_id:
          type: string
          description: UUID of connected `Workgroup`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        network_id:
          type: string
          description: UUID of host `Network`. _UUID as specified by RFC4122_
          format: uuid
        organization_id:
          type: string
          description: UUID of connected `Organization`. _UUID as specified by RFC4122_
          format: uuid
          nullable: true
        name:
          type: string
          description: User-defined name of `Connector`
        type:
          type: string
          
        status:
          type: string
          readOnly: true
        description:
          type: string
          description: User-defined descriptor of the reference `Connector`
          nullable: true
        config:
          $ref: '#/components/schemas/ConnectorConfig'
      example:
        id: dfec9cb2-e655-4d6d-b4fe-35fb6c6af7a0
        created_at: '2021-04-16T15:05:23.107Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Sample Connector
        type: provide
        status: provisioning
        config:
          api_port: 8080
          api_url: |
            'https://ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com:8080'
          container: providenetwork-ipfs
          image: provide/ident
          provider_id: docker
          region: us-east-2
          role: peer
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8080
                udp: []
          target_id: aws
    ConnectorConfig:
      title: Connector Config
      type: object
      properties:
        image:
          type: string
        gateway_port:
          type: integer
          format: int32
        provider_id:
          type: string
        region:
          type: string
        role:
          type: string
        rpc_port:
          type: integer
          format: int32
        security:
          $ref: '#/components/schemas/Security'
        target_id:
          type: string
        api_port:
          type: integer
          format: int32
        api_url:
          type: string
      example:
        image: provide/nats-server
        provider_id: docker
        region: us-east-1
        role: peer
        port: 4222
        security:
          egress: '*'
          ingress:
            0.0.0.0/0:
              tcp:
                - 4222
              udp: []
        target_id: aws
    Contract:
      title: Contract
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: UUID of the target `Contract`. _UUID as specified by RFC4122_
        created_at:
          type: string
          readOnly: true
          description: Date and time of `Contract` creation
        workgroup_id:
          type: string
          format: uuid
          readOnly: false
          description: UUID of target `Workgroup`._UUID as specified by RFC4122_
        organization_id:
          type: string
          nullable: true
          readOnly: true
          description: ID of 
        network_id:
          type: string
          readOnly: false
          description: UUID of target `Network`. _UUID as specified by RFC4122_
        contract_id:
          type: string
          nullable: true
          readOnly: true
          description: UUID of the parent `Contract`. _UUID as specified by RFC4122_
        transaction_id:
          type: string
          nullable: true
          readOnly: true
          description: UUID of the `Transaction`. _UUID as specified by RFC4122_
        name:
          type: string
          readOnly: false
        address:
          type: string
          readOnly: false
        type:
          type: string
          nullable: true
          readOnly: false
        accessed_at:
          type: string
          nullable: true
          readOnly: true
        pubsub_prefix:
          type: string
          readOnly: true
        params:
          $ref: '#/components/schemas/ContractParams'
      example:
        id: 84a91108-70db-43c5-9f2f-e1655b9e0b03
        created_at: '2021-02-27T14:26:06.864Z'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 07102258-5e49-480e-86af-6d0c3260827d
        transaction_id: 4c388cca-f11c-4818-96a0-e8ad0b30553d
        name: Shuttle
        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
        type: registry
        accessed_at: '2021-02-28T00:41:44.506+0000'
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
        params:
          account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
          compiled_artifact:
            contractName: Ekho
            abi:
              - anonymous: false
                inputs:
                  - indexed: false
                    internalType: bytes
                    name: message
                    type: bytes
                name: Ekho
                type: event
              - inputs:
                  - internalType: bytes
                    name: message
                    type: bytes
                name: broadcast
                outputs: []
                stateMutability: nonpayable
                type: function
            bytecode: 0x
            source: |
              contract Ekho {
                  event Ekho(bytes message);
                  function broadcast(bytes memory message) public {
                      emit Ekho(message);
                  }
              }
    ContractParams:
      title: Contract Params
      required:
        - account_id
        - compiled_artifact
      type: object
      properties:
        account_id:
          type: string
          description: ID of target `Account`
        compiled_artifact:
          $ref: '#/components/schemas/CompiledArtifact'
      example:
        account_id: df83bcbb-ff5b-4c4c-b1f5-8ca6a61fe460
        compiled_artifact:
          contractName: Ekho
          abi:
            - anonymous: false
              inputs:
                - indexed: false
                  internalType: bytes
                  name: message
                  type: bytes
              name: Ekho
              type: event
            - inputs:
                - internalType: bytes
                  name: message
                  type: bytes
              name: broadcast
              outputs: []
              stateMutability: nonpayable
              type: function
          bytecode: 0x
          source: |
            contract Ekho {
                event Ekho(bytes message);
                function broadcast(bytes memory message) public {
                    emit Ekho(message);
                }
            }
    CreateSealorUnsealKey:
      title: Create Seal/Unseal Key
      required:
        - key
        - validation_hash
      type: object
      properties:
        key:
          type: string
        validation_hash:
          type: string
      example:
        key: quantum leap fast forward keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
        validation_hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
    Credentials:
      title: Credentials
      required:
        - aws_access_key_id
        - aws_secret_access_key
      type: object
      properties:
        aws_access_key_id:
          type: string
          format: password
        aws_secret_access_key:
          type: string
          format: password
      example:
        aws_access_key_id: '{{aws_access_key_id}}'
        aws_secret_access_key: '{{aws_secret_key}}'
    DeployContract:
      title: Deploy Contract
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        workgroup_id:
          type: string
        organization_id:
          type: string
          nullable: true
        network_id:
          type: string
        contract_id:
          type: string
          nullable: true
        transaction_id:
          type: string
          nullable: true
        name:
          type: string
        address:
          type: string
        type:
          type: string
          nullable: true
        params:
          $ref: '#/components/schemas/ContractParams'
        accessed_at:
          type: string
          nullable: true
        pubsub_prefix:
          type: string
      example:
        id: 3956687d-154f-4a86-a6f8-43b39a8bd58e
        created_at: '2021-04-16T15:20:35.143+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        name: Ekho
        address: '0xD3F14c012a8717FF7b5D5AC08C287de58C38D8ba'
        params:
          account_id: 8a1f4492-9a73-4e3d-bafe-6a3794b1320e
          compiled_artifact:
            contractName: Ekho
            abi:
              - anonymous: false
                inputs:
                  - indexed: false
                    internalType: bytes
                    name: message
                    type: bytes
                name: Ekho
                type: event
              - inputs:
                  - internalType: bytes
                    name: message
                    type: bytes
                name: broadcast
                outputs: []
                stateMutability: nonpayable
                type: function
            bytecode: 0x
            source: |
              contract Ekho {
                  event Ekho(bytes message);
                  function broadcast(bytes memory message) public {
                      emit Ekho(message);
                  }
              }
        pubsub_prefix: 57478604c134ef20b94dff84e52c0fd562ddae56cd50431339766819a7523d09
    DeriveKeyRequest:
      title: Derive Key Request
      required:
        - context
        - description
        - name
        - nonce
      type: object
      properties:
        nonce:
          type: integer
          format: int32
        context:
          type: string
        name:
          type: string
          description: Name of derived `Key`
        description:
          type: string
          description: Description of derived `Key`
      example:
        nonce: 1
        context: channel-6852386c-8a3d-41c6-aa0e-766a31a8faaf
        name: private chat
        description: this is a secure channel
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      example:
        code: 500
        message: The request resulted in an internal error during processing
    ExecuteContractRequest:
      title: Execute Contract Request
      required:
        - account_id
        - method
        - params
        - value
      type: object
      properties:
        method:
          type: string
        params:
          type: array
          items:
            type: string
        value:
          type: integer
          format: int32
        account_id:
          type: string
          description: ID of `Account` funding `Contract` execution
      example:
        method: broadcast
        params:
          - hello world
        value: 0
        account_id: 30ff7e74-b870-449e-b41d-e508487f7faf
    ExecuteContractResponse:
      title: Execute Contract Response
      required:
        - confidence
        - ref
      type: object
      properties:
        confidence:
          type: string
          nullable: true
        ref:
          type: string
      example:
        ref: 6d481b8c-6354-4c2f-8c9c-26563b3e5db7
    Ingress:
      title: Ingress
      required:
        - 0.0.0.0/0
      type: object
      properties:
        0.0.0.0/0: {}
      example:
        0.0.0.0/0:
          tcp:
            - 4222
          udp: []
    IssueVerifiableCredential:
      title: Issue Verifiable Credential Request
      type: object
      description: request to issue a verifiable credential
      properties:
        address:
          type: string
        organization_id:
          type: string
          format: uuid
        public_key:
          type: string
        signature:
          type: string
    JWK:
      title: JSON Web Key Set (JWK)
      required:
        - e
        - fingerprint
        - kid
        - 'n'
        - public_key
      type: object
      properties:
        kid:
          type: string
          description: The unique identifier for the key.
        'n':
          type: string
          description: The modulus for the RSA public key.
        e:
          type: string
          description: The exponent for the RSA public key.
        fingerprint:
          type: string
        public_key:
          type: string
      example:
        kid: c5:eb:8d:59:44:38:63:06:c9:d3:e4:97:08:fb:68:9c
        'n': >-

        e: 10001
        fingerprint: e6:f7:d5:24:e2:59:06:2b:bc:a2:8c:35:9d:ca:0a:87
        public_key: 0x055c95n123456f3216eaeba7d165a1ff1287d04b90d0c8be02fb1e18d26406484a52a5b0dcf49498ae09e0d097024124fc2849655c344edf62bdb8478f2d9a8bcb
    Key:
      title: Key
      required:
        - description
        - name
        - spec
        - type
        - usage
      type: object
      readOnly: true
      properties:
        type:
          type: string
          description: Type of `Key` being created
          enum:
            - asymmetric
            - symmetric
        usage:
          type: string
          description: Purpose for `Key` being created
          enum:
            - encrypt/decrypt
            - sign/verify
        spec:
          type: string
          description: Specification to be used for `Key` creation
          enum:
            - AES-256-GCM
            - babyJubJub
            - BIP39
            - ChaCha20
            - C25519
            - Ed25519
            - RSA-2048
            - RSA-3072
            - RSA-4096
            - secp256k1
        name:
          type: string
          description: Name of `Key` to be generated
        description:
          type: string
          description: Description of `Key` to be generated
        public_key:
          type: string
          readOnly: true
      example:
        type: asymmetric
        usage: sign/verify
        spec: C25519
        name: 'c25519 key #1'
        description: c25519 key
    LastBlockHeader:
      title: Last Block Header
      type: object
      properties:
        difficulty:
          type: string
        extraData:
          type: string
        gasLimit:
          type: string
        gasUsed:
          type: string
        hash:
          type: string
        logsBloom:
          type: string
        miner:
          type: string
        mixHash:
          type: string
        nonce:
          type: string
        number:
          type: string
        parentHash:
          type: string
        receiptsRoot:
          type: string
        sha3Uncles:
          type: string
        stateRoot:
          type: string
        timestamp:
          type: string
        transactionsRoot:
          type: string
      example:
        difficulty: '0x6fc715c5'
        extraData: '0xd883010a01846765746886676f312e31368777696e646f7773'
        gasLimit: '0x7a1200'
        gasUsed: '0x12710a'
        hash: '0x252583967a2371984a30a647a8568bd50d8330e72ff33891d69ebb079aeb2ba1'
        logsBloom: '0x00200000010000000000000480020000020000000000000000814020000000000000000000000000000000000000000000008000000200000000000000010000080010000000000000000008004000a00000010000000000000000000000000000000010020000100080400000020800000000020000001000000010040000000200000000000000304008000000000000001000000000081102004000012040100000000001000008020000000000080000000001080020000000018000020000000002000000000000000000000000041000200082001004000002000020000c00000000900000000000000000000000800000020080000080000000000000'
        miner: '0x77d1ca4b0cd084e5a421e5d26b96b9a49fa752c2'
        mixHash: '0x75c043be1d1dbb6dc568065c4048a65b763f186348b5c5d2d0a84880f6747edc'
        nonce: '0x4fe1d5c3202230a8'
        number: '0x9e1fd7'
        parentHash: '0x279dbc9f7b7efe981ac58329bbca1864b39723df8aa362796a7a9bd5893ab1aa'
        receiptsRoot: '0x7f874242eaa2e4c5b478f9e8b6abdd95cb10b939ad0fe000e8dc4807efacc4e6'
        sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        stateRoot: '0x76f111ed19e015cc7ce8d9a5e4f387365390adc5fcc97228705643e907eb793a'
        timestamp: '0x60b840dc'
        transactionsRoot: '0xed041ced1958b58c1040e1e09c456dcc551298eae8d7edca2659f6695a873f'
    LoadBalancer:
      title: Load Balancer
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        network_id:
          type: string
        workgroup_id:
          type: string
        name:
          type: string
        type:
          type: string
        host:
          type: string
        ipv4:
          type: string
          nullable: true
        ipv6:
          type: string
          nullable: true
        description:
          type: string
        region:
          type: string
        status:
          type: string
      example:
        id: 64d209eb-a09d-4e2c-939e-4985a8aba70a
        created_at: '2021-04-16T15:05:23.130Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        name: ceeb3bca-3b92-44b9-8ac5-fdd4564
        type: provide
        host: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com
        description: ceeb3bca-3b92-44b9-8ac5-fdd4564 - aws us-east-2
        region: us-east-2
        status: active
        config:
          api_port: 8080
          container: providenetwork-ipfs
          image: provide/ident
          load_balancer_name: ceeb3bca-3b92-44b9-8ac5-fdd4564
          load_balancer_url: ceeb3bca-3b92-44b9-8ac5-fdd4564-717022042.us-east-2.elb.amazonaws.com
          provider_id: docker
          region: us-east-2
          role: peer
          security:
            egress: '*'
            ingress:
              0.0.0.0/0:
                tcp:
                  - 8080
                udp: []
          target_balancer_id: '''arn:aws:elasticloadbalancing:us-east-2:192663109025:loadbalancer/app/ceeb3bca-3b92-44b9-8ac5-fdd4564/8340a112fd942e75'''
          target_id: aws
          target_security_group_ids:
            - sg-009a2c35c02c1ddc0
          vpc_id: vpc-44df352f
    LogMessage:
      title: Log Message
      type: object
      description: is a format to receive system of record log messages in the proxy
      properties:
        baseline_id:
          type: string
        message:
          type: string
        object_id:
          type: string
        severity:
          type: string
        timestamp:
          type: string
          readOnly: true
        type:
          type: string
    Message:
      title: Message
      type: object
      description: Proxy-internal wrapper for protocol message handling
      properties:
        baseline_id:
          type: string
        errors:
          type: string
        id:
          type: string
        message_id:
          type: string
        payload:
          type: string
        protocol_message:
          type: string
        recipients:
          type: string
        type:
          type: string       
    Network:
      title: Network
      required:
        - chain_id
        - config
        - created_at
        - description
        - enabled
        - id
        - name
        - workgroup_id
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created_at:
          type: string
          readOnly: true
        workgroup_id:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: false
        description:
          type: string
          nullable: true
          readOnly: false
        enabled:
          type: boolean
        chain_id:
          type: string
        config: {}
      example:
        id: 2461556c-25ab-4c49-80e7-8d4733e0231b
        created_at: '2021-04-16T15:07:01.962+0000'
        workgroup_id: dc767890-0bbc-4c1d-bc04-f5842330018f
        name: Sample Testnet
        enabled: true
        chain_id: 1618585621
        config:
          chain: test
          chainspec:
            alloc: {}
            coinbase: 0
            config:
              byzantiumBlock: 0
              constantinopleBlock: 0
              eip150Block: 0
              eip155Block: 0
              eip158Block: 0
              homesteadBlock: 0
              petersburgBlock: 0
            difficulty: 131072
            extraData: ''
            gasLimit: 3141592
            mixhash: 0
            nonce: 66
            parentHash: 0
            timestamp: 0
          engine_id: ethash
          native_currency: TEST
          network_id: 1618585621
          platform: evm
          protocol_id: pow
    NetworkStatus:
      title: Network Status
      properties:
        block:
          type: integer
          format: int32
        chain_id:
          type: string
        last_block_at:
          type: integer
          format: int64
        meta: 
          type: object
          readOnly: true
          properties:
            average_blocktime:
              type: string
            blocktimes: 
              type: array
              items:
                type: string
            last_block_hash:  
              type: string
            last_block_header:
              $ref: '#/components/schemas/LastBlockHeader'
      example:
        block: 10051293
        chain_id: '3'
        last_block_at: 1618585516000
        meta:
          average_blocktime: 16.857142857142858
          blocktimes:
            - 55
            - 24
            - 8
            - 1
            - 3
            - 20
            - 7
          last_block_hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
          last_block_header:
            $ref: '#/components/schemas/LastBlockHeader'
    OpenIDConfig:
      title: OpenID Config
      type: object
      properties:
        authorization_endpoint:
          type: string
        claims_supported:
          type: array
          items:
            type: string
        cloud_instance_name:
          type: string
        device_authorization_endpoint:
          type: string
        end_session_endpoint:
          type: object
        frontchannel_logout_supported:
          type: boolean
        http_logout_supported:
          type: boolean
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        issuer:
          type: string
        jwks_uri:
          type: string
        rbac_url:
          type: object
        request_uri_parameter_supported:
          type: boolean
        response_modes_supported:
          type: array
          items:
            type: string
        response_types_supported:
          type: array
          items:
            type: string
        scopes_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        tenant_region_scope:
          type: object
        token_endpoint:
          type: string
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        userinfo_endpoint:
          type: string
      example:
        authorization_endpoint: https://ident.provide.services/api/v1/oauth/authorize
        claims_supported:
          - acr
          - aud
          - email
          - exp
          - iat
          - iss
          - nats
          - nonce
          - nbf
          - prvd
          - sub
        cloud_instance_name: provide.services
        device_authorization_endpoint: https://ident.provide.services/api/v1/oauth/devicecode
        frontchannel_logout_supported: false
        http_logout_supported: false
        id_token_signing_alg_values_supported:
          - EdDSA
          - RS256
        issuer: https://ident.provide.services
        jwks_uri: https://ident.provide.services/.well-known/keys
        request_uri_parameter_supported: false
        response_modes_supported:
          - query
          - fragment
          - form_post
        response_types_supported:
          - code
          - id_token
          - code id_token
          - id_token token
        scopes_supported:
          - email
          - offline_access
          - openid
          - profile
        subject_types_supported:
          - pairwise
        token_endpoint: https://ident.provide.services/api/v1/tokens
        token_endpoint_auth_methods_supported:
          - client_secret_post
          - private_key_jwt
          - client_secret_basic
        userinfo_endpoint: https://ident.provide.services/api/v1/userinfo
    Organization:
      title: Organization
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of `Organization` being created
        description:
          type: string
          description: Description of `Organization` being created
      example:
        name: ACME Inc.
        description: organization for testing
    Participant:
      title: Participant
      type: object
      description: Party to a baseline workgroup or workflow context
      properties:
        address:
          type: string
        metadata:
          type: string
        api_endpoint:
          type: string
        messaging_endpoint:
          type: string  
    ProtocolMessage:
      title: Protocol Message
      type: object
      description: Baseline protocol message
      properties:
        baseline_id:
          type: string
          format: uuid
          readOnly: true
        opcode:
          type: string
        sender:
          type: string
        recipient:
          type: string
        shield:
          type: string
        identifer:
          type: string
          format: uuid
          readOnly: true
        signature:
          type: string
        type:
          type: string
        payload:
          $ref: '#/components/schemas/ProtocolMessagePayload'
    ProtocolMessagePayload:
      title: Protocol Message Payload
      description: Baseline protocol message payload
      properties:
        object:
          type: object
        proof:
          type: string
        type:
          type: string
        witness:
          type: object
    ProveRequest:
      title: Prove Request
      required:
        - curve
        - identifier
        - name
        - provider
        - proving_scheme
      type: object
      properties:
        identifier:
          type: string
        proving_scheme:
          type: string
        curve:
          type: string
        provider:
          type: string
        name:
          type: string
      example:
        identifier: cubic
        proving_scheme: groth16
        curve: BN256
        provider: gnark
        name: my 1337 circuit
    Secret:
      title: Secret
      required:
        - description
        - name
        - type
        - vault_id
        - value
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          readOnly: true
        vault_id:
          type: string
          readOnly: false
        type:
          type: string
          readOnly: false
        name:
          type: string
          readOnly: false
        description:
          type: string
          readOnly: false
        value:
          type: string
          readOnly: false
      example:
        id: e9138dd7-b429-410a-bfa8-2a506d9e4297
        created_at: '2021-04-17T20:35:34.062+0000'
        vault_id: 22e48752-7bff-4daa-89b3-91053bd509f2
        type: sample secret
        name: 'secret #1'
        description: this secret is being stored for demonstration purposes
    Security:
      title: Security
      required:
        - egress
        - ingress
      type: object
      properties:
        egress:
          type: string
        ingress: {}
      example:
        egress: '*'
        ingress:
          0.0.0.0/0:
            tcp:
              - 4222
            udp: []
    Token:
      title: Token
      type: object
      properties:
        id:
          type: string
          description: ID of `Token` issued
          readOnly: true
        scope:
          type: string
          description: Scope of authorization request
          enum:
            - offline_access
          readOnly: false
        expires_in:
          type: number
          description: Time in minutes until `Token` will no longer be valid
          readOnly: true
          nullable: true
        access_token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true        
        refresh_token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true
        token:
          type: string
          description: JSON formatted Web Token
          format: password
          readOnly: true
          nullable: true
        permissions:
          type: number
          description: Authorized permissions for `Token`, expressed as a bitmask
          nullable: true 
          readOnly: true
        organization_id:
          type: string
          description: UUID of `Organization` requiring authorization. _UUID as specified by RFC4122_
          nullable: true
          writeOnly: true
        application_id:
          type: string
          description: ID of `Workgroup` requiring authorization. _UUID as specified by RFC4122_
          nullable: true
          writeOnly: true
      example:
        id: r19e831-43fd-237e-8b43-12af828ba3e3
        scope: offline_access
        expires_in: 900
        access_token: <JWT>
        refresh_token: <JWT>
        permissions: 415
    Transaction:
      properties:
        id:
          type: string
          description: UUID for a specific `Transaction`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Date and time of `Transaction` creation
          format: date-time
          readOnly: true
        network_id:
          type: string
          description: UUID of the `Network` on which the Transaction will be broadcast. _UUID as specified by RFC4122_
          format: uuid
          readOnly: false
        user_id:
          type: string
          description: UUID for the `User` that created `Transaction`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        wallet_id:
          type: string
          description: UUID of `Wallet` to be used to sign `Transaction`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: false
        key_id:
          type: string
          description: UUID of the Vault Key which will be used to sign the `Transaction`; required in the absence of a `signer`. _UUID as specified by RFC4122_
          format: uuid
        account_id:
          type: string
          description: UUID of `Account` to be used for `Transaction` creation. _UUID as specified by RFC4122_
        hd_derivation_path:
          type: string
        to:
          type: string
          description: Public network address of the recipient of the Transaction, if applicable
        value:
          type: number
          description: Total amount of value, represented in the smallest standard denomination of native currency for the target Network (i.e., wei), to be transferred by the sender to the recipient
        data:
          type: object
          nullable: true
        hash:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        ref:
          type: object
          nullable: true
          readOnly: true
        description:
          type: object
          nullable: true
        block:
          type: number
          readOnly: true
        block_timestamp:
          type: string
          readOnly: true
        broadcast_at:
          type: string
          format: date-time
          readOnly: true
        finalized_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
          readOnly: true
        queue_latency:
          type: integer
          readOnly: true
        network_latency:
          type: integer
          readOnly: true
        e2e_latency:
          type: integer
          readOnly: true
      example:
        id: 99a61ee5-73ea-46d1-a434-b6a2a908bc51
        created_at: '2021-04-21T02:12:11.158Z'
        network_id: 66d44f30-9092-4182-a3c4-bc02736d6ae5
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        wallet_id: 0fda2f96-d957-4f65-9e92-fa5092c51751
        hd_derivation_path: m/44'/60'/0'/0/0
        to: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        value: 0
        hash: 698465416514684984piouhygiuytfruytdcghbkjhbvjyhdc
        status: success
        block: 10079406
        block_timestamp: '2021-04-21T02:12:05.000Z'
        finalized_at: '2021-04-21T02:12:14.277Z'
    UnsealVaultRequest:
      title: Unseal Vault Request
      required:
        - key
      type: object
      properties:
        key:
          type: string
      example:
        key: quantum mirror summer general keep west promote satisfy limit butter mother oyster lazy whip earn spot ticket protect mean play script peace parent intact
    User:
      title: User
      required:
        - email
        - first_name
        - last_name
      type: object
      properties:
        id:
          type: string
          description: UUID for the reference `User`. Expressed as a _UUID as specified by RFC4122_
          readOnly: true
          example: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at:
          type: string
          description: Date and time of `User` creation
          readOnly: true
          example: 
        name:
          type: string
          description: Full name of `User`
          example: Joe User
          readOnly: true
        first_name:
          type: string
          description: First name of `User`
          example: Joe
          readOnly: false
        last_name:
          type: string
          description: Last name of `User`
          example: User
          readOnly: false
        email:
          type: string
          description: Email address for `User`
          example: joeusr@baseline.local
        password:
          type: string
          format: password
          writeOnly: true
          example: s3cr37
        permissions:
          type: integer
          description: Authorized privileges for `User`
          readOnly: true
          example: 415
        privacy_policy_agreed_at:
          type: string
          description: Date and time of acceptance of the privacy policy
          readOnly: true
          example: 2021-01-27T03:19:33.349Z
        terms_of_service_agreed_at:
          type: string
          description: Date and time of acceptance of the terms of service
          readOnly: true
          example: 2021-01-27T03:19:33.349Z
      example:
        id: 7r19e831-43fd-237e-8b43-12af828ba3e3
        created_at: '2021-01-27T03:19:33.349Z'
        name: Joe User
        first_name: Joe
        last_name: User
        email: joeusr@baseline.local
        permissions: 415
        privacy_policy_agreed_at: '2021-01-27T03:19:33.349Z'
        terms_of_service_agreed_at: '2021-01-27T03:19:33.349Z'
    Vault:
      properties:
        id:
          type: string
          description: UUID for a specific `Vault` instance. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Date and time of `Vault` creation
          format: date-time
          readOnly: true
        name:
          type: string
          description: User-defined identifier for a specific `Vault` instance
          readOnly: false
        description:
          type: string
          description: User-defined summary of a specific `Vault`  instance
          readOnly: false    
    VerifyProofRequest:
      title: Verify Proof Request
      required:
        - proof
        - witness
      type: object
      properties:
        witness:
          $ref: '#/components/schemas/Witness'
        proof:
          type: string
          description: The hex-formatted proof to verify
        store:
          type: boolean
          description: when true, the proof hash is written to the configured circuit store
      example:
        witness:
          X: '3'
          'Y': '35'
        proof: 88b8d340795f4258c1f2c0ed8478b44859c90472af9ccdc5c54b02c85bcd879d9ddf3a3fb7c6926ea247c0b1c411abe2f5ba9c8deba60ab476428272767a761d1e14e343208024326429e361ebbc4c11daf5f16dbb7f7f4679cf85b17b59b1bdaa379a82ddab4dcbb7cd2bc32cdebadc6825c72d5f8e624f6d0f6b07906a8248
    Wallet:
      title: Wallet
      type: object
      properties:
        id:
          type: string
          description: UUID for a unique `Wallet`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Date and time of `Wallet` creation
          readOnly: true
        network_id:
          type: string
          format: uuid
          readOnly: false
          description: UUID for the target `Network`. _UUID as specified by RFC4122_
        user_id:
          type: string
          description: UUID for the `User` that created a `Wallet`. _UUID as specified by RFC4122_
          readOnly: true
        vault_id:
          type: string
          description: UUID for the `Vault` that created a `Wallet`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
        key_id:
          type: string
          description: UUID of private key used to create `Wallet`
          format: uuid
          readOnly: true
        purpose:
          type: integer
          description: Purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation. It indicates that the subtree of this node is used according to this specification. Hardened derivation is used at this level
          format: string
          readOnly: false
        public_key:
          type: string
          description: Public signing key of `Wallet`
          readOnly: true
      description: hierarchical deterministic (HD) wallet in accordance with BIP44
      example:
        id: bbc1195e-d131-4b2f-b1a8-1b6f34b55d3e
        created_at: 2021-03-30T02:50:17.155Z
        user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        vault_id: 190822c9-62f5-4caf-a419-df735a793b2f
        key_id: db9e6e21-23b0-497d-a02c-8a8813f8bf2d
        purpose: 44
        public_key: xpub661MyMwAqRbcGdYXwwnwcnrH51AxyF3kkTeEt6iZfNDXsg4MLPgV7bEZ2v4uCx9djAboy6vSv3VbHPc6hf4Do8wb7FpJCuG7aMBwH2QgLJu
    Witness:
      title: Witness
      required:
        - X
        - 'Y'
      type: object
      properties:
        X:
          type: string
        'Y':
          type: string
      description: Public and private inputs used to generate the proof
      example:
        X: '3'
        'Y': '35'
    Workgroup:
      required:
        - name
        - type
      type: object
      properties:
        id:
          type: string
          description: UUID for the `Workgroup`. _UUID as specified by RFC4122_
          format: uuid
          readOnly: true
          example: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
        created_at:
          minLength: 1
          type: string
          description: Date and time of record creation. Expressed as a Unix timestamp.
          format: date-time
          readOnly: true
          example: '2021-05-21T12:36:52.977Z'
        network_id:
          type: string
          description: UUID for the host `Network` of the `Workgroup`. _UUID as specified by RFC4122_
          format: uuid
          example: 07102258-5e49-480e-86af-6d0c3260827d
        user_id:
          maxLength: 36
          minLength: 1
          type: string
          description: UUID for the `User` that created the `Workgroup`. _UUID as specifed by RFC4122_
          format: uuid
          example: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
        name:
          minLength: 1
          type: string
          description: User-defined name of the `Workgroup`
        description:
          type: string
          description: User-defined `Workgroup` descriptor
          example: Sample workgroup description
        type:
          minLength: 1
          type: string
          description: Designates `Workgroup` `type`. In a baseline `Workgroup`, will always be `baseline`
          example: baseline
          default: baseline
        config:
          $ref: '#/components/schemas/WorkgroupConfig'
        hidden:
          type: boolean
          description: When `True`, the `Workgroup` is hidden from public searches
      description: |-
        A `Workgroup` represents a logical collection of resourcess provisioned within the baseline containerized microservices architecture. An `Workgroup` is immutably configured upon initialization with support for a primary 'Network'.
        Access to programmatically manage resources associated with an `Workgroup` is provided via REST API, to which ACL-based authorization is managed using generic permissions.
      example:
        Demo Workgroup:
          id: bdf94fc0-63ad-4ee9-ac75-7eb63365d0f6
          created_at: '2021-05-21T12:36:52.977Z'
          network_id: 07102258-5e49-480e-86af-6d0c3260827d
          user_id: 7c8fe6f1-38c3-4da1-b4b7-7591c6d0ca7c
          name: Demo Workgroup
          description: Workgroup intended for demonstration purposes
          type: baseline
          config:
            baselined: true
            webhook_secret: 1dfd34519a06420d8a6ed18afdffe932
          hidden: false
    WorkgroupConfig:
      title: Workgroup Config
      type: object
      properties:
        baselined:
          type: boolean
        webhook_secret:
          minLength: 1
          type: string
        network_id:
          type: string
      description: Configuration object intended for use by integrated services
    Workflow:
      title: Workflow
      type: object
      properties:
        circuits:
          type: string
        identifier:
          type: string
        parcicipants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        shield:
          type: string
        workstep_index:
          type: integer
          format: int64            
  responses:
    OK:
      description: The request was successful
    NoContent:
      description: The request was successful but did not return a response
    Accepted:
      description: The request has been accepted for processing, but the processing has not been completed
    Success:
      description: The request was successful and a new entity was created
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code: 
                type: integer
              message: 
                type: string
          example: 
            code: 401
            message: The request required an API Authorization header, or one was provided which could not be authenticated
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              code: 
                type: integer
              message: 
                type: string
          example: 
            code: 403
            message: The supplied API Authorization header does not have permission to access the requested resource. Please verify that you have sufficient permissions and try again
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code: 
                type: integer
              message: 
                type: string
          example: 
            code: 404
            message: Platform did not find the requested resource
    InternalServerError:
      description: Not Implemented
      content:
        application/json:
          schema:
            type: object
            properties:
              code: 
                type: integer
              message: 
                type: string
          example: 
            code: 501
            message: The requested resource is not implemented by the platform
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              code: 
                type: integer
              message: 
                type: string
          example: 
            code: 503
            message: The request cannot be fulfilled due to temporary unavailability of a backend service
  parameters:
    page:
      name: page
      in: query
      description: Limits resulting response to the page number specified
      required: false
      style: form
      explode: true
      schema:
        type: integer
    resultsPerPage:
      name: rpp
      in: query
      description: Sets the number of results included per page
      required: false
      style: form
      explode: true
      schema:
        type: integer
    public:
      name: public
      in: query
      description: When `TRUE` limits results to non-private records
      required: false
      style: form
      explode: true
      schema:
        type: boolean
  headers:
    X-Total-Results-Count:
      schema:
        type: integer
        description: Number of total query hits across all pages
        example: 14
  securitySchemes:
    bearerAuth:
      type: http
      description: 'The presence of a `bearer` API token is required to authorize most Baseline API calls. A `bearer` API token is an encoded JWT which contains a subject claim (`sub`) which references an authorized entity (i.e., the `User`, `Application` or `Organization`). The authorized entity uses a signed `bearer` authorization Token to access one or more resources for which the Token was authorized.  Unless otherwise noted, all API requests must include a header such as `Authorization: bearer <jwt>`'
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      description: >-
        OAuth2 support. In accordance with the OAuth 2.0 specification, when an entity is authorized and the requested `scope` includes `offline_access`, a refresh token is vended and returned on behalf of the caller. This refresh token is long-lived and can be used to authorize short-lived access tokens using the `refresh_token `grant type on subsequent authorization requests. This pattern is useful for machine-to-machine applications; a secure practice is to store the long-lived refresh token
        in a Vault instance (i.e., as a secret), read it into application memory during container initialization and then use it to authorize a short-lived access token. If the container remains running long enough for the access token to expire, the refresh token should once again be used to seamlessly authorize a new access token.
      flows:
        implicit:
          authorizationUrl: https://ident.provide.services/api/v1/oauth/authorize
          scopes:
            email: email and password
            offline_access: access/refresh token authorization model
            profile: ''
            openid: ''
externalDocs:
  description: Privacy Policy
  url: https://provide.services/privacy-policy