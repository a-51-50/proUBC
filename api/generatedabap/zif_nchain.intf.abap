INTERFACE zif_nchain PUBLIC.
* Generated by abap-openapi-client
* NChain_OG, 1.0

* Component schema: CreateconnectorRequest, object
  TYPES: BEGIN OF createconnectorrequest,
           name TYPE string,
           network_id TYPE string,
           type TYPE string,
           config TYPE config,
         END OF createconnectorrequest.

* Component schema: Config, object
  TYPES: BEGIN OF config,
           region TYPE string,
           target_id TYPE string,
           provider_id TYPE string,
           role TYPE string,
           container TYPE string,
           credentials TYPE credentials,
           image TYPE string,
           api_port TYPE i,
           security TYPE security,
         END OF config.

* Component schema: Credentials, object
  TYPES: BEGIN OF credentials,
           aws_access_key_id TYPE string,
           aws_secret_access_key TYPE string,
         END OF credentials.

* Component schema: Security, object
  TYPES: BEGIN OF security,
           egress TYPE string,
           ingress TYPE ingress,
         END OF security.

* Component schema: Ingress, object
  TYPES: BEGIN OF ingress,
           0_0_0_0_0 TYPE m00000,
         END OF ingress.

* Component schema: m00000, object
  TYPES: BEGIN OF m00000,
           tcp TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           udp TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF m00000.

* Component schema: CreatenetworkRequest, object
  TYPES: BEGIN OF createnetworkrequest,
           name TYPE string,
           cloneable TYPE abap_bool,
           config TYPE config1,
         END OF createnetworkrequest.

* Component schema: Config1, object
  TYPES: BEGIN OF config1,
           native_currency TYPE string,
           platform TYPE string,
           engine_id TYPE string,
           chain TYPE string,
           protocol_id TYPE string,
           chainspec TYPE chainspec,
         END OF config1.

* Component schema: Chainspec, object
  TYPES: BEGIN OF subchainspec_alloc,
           dummy_workaround TYPE i,
         END OF subchainspec_alloc.
  TYPES: BEGIN OF chainspec,
           config TYPE config2,
           alloc TYPE subchainspec_alloc,
           coinbase TYPE string,
           difficulty TYPE string,
           extradata TYPE string,
           gaslimit TYPE string,
           nonce TYPE string,
           mixhash TYPE string,
           parenthash TYPE string,
           timestamp TYPE string,
         END OF chainspec.

* Component schema: Config2, object
  TYPES: BEGIN OF config2,
           homesteadblock TYPE i,
           eip150block TYPE i,
           eip155block TYPE i,
           eip158block TYPE i,
           byzantiumblock TYPE i,
           constantinopleblock TYPE i,
           petersburgblock TYPE i,
         END OF config2.

* Component schema: CreateaccountsRequest, object
  TYPES: BEGIN OF createaccountsrequest,
           network_id TYPE string,
         END OF createaccountsrequest.

* Component schema: CreateHDwalletRequest, object
  TYPES: BEGIN OF createhdwalletrequest,
           purpose TYPE i,
         END OF createhdwalletrequest.

* Component schema: Create&broadcasttransaction-AccountRequest, object
  TYPES: BEGIN OF create&broadcasttransaction_ac,
           network_id TYPE string,
           key_id TYPE string,
           to TYPE string,
           value TYPE i,
           account_id TYPE string,
         END OF create&broadcasttransaction_ac.

* Component schema: Create&broadcasttransaction-WalletRequest, object
  TYPES: BEGIN OF create&broadcasttransaction_wa,
           network_id TYPE string,
           key_id TYPE string,
           from TYPE string,
           to TYPE string,
           value TYPE i,
           wallet_id TYPE string,
           hd_derivation_path TYPE string,
         END OF create&broadcasttransaction_wa.

* Component schema: DeploycontractRequest, object
  TYPES: BEGIN OF deploycontractrequest,
           application_id TYPE string,
           network_id TYPE string,
           name TYPE string,
           address TYPE string,
           params TYPE params,
         END OF deploycontractrequest.

* Component schema: Params, object
  TYPES: BEGIN OF params,
           account_id TYPE string,
           compiled_artifact TYPE compiledartifact,
         END OF params.

* Component schema: CompiledArtifact, object
  TYPES: BEGIN OF compiledartifact,
           contractname TYPE string,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           bytecode TYPE string,
           source TYPE string,
         END OF compiledartifact.

* Component schema: Abi, object
  TYPES: BEGIN OF abi,
           anonymous TYPE abap_bool,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           name TYPE string,
           type TYPE string,
           outputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           statemutability TYPE string,
         END OF abi.

* Component schema: Input, object
  TYPES: BEGIN OF input,
           indexed TYPE abap_bool,
           internaltype TYPE string,
           name TYPE string,
           type TYPE string,
         END OF input.

* Component schema: BaselinedeployregistrycontractRequest, object
  TYPES: BEGIN OF baselinedeployregistrycontract,
           application_id TYPE string,
           network_id TYPE string,
           name TYPE string,
           address TYPE string,
           params TYPE params1,
         END OF baselinedeployregistrycontract.

* Component schema: Params1, object
  TYPES: BEGIN OF params1,
           account_id TYPE string,
           compiled_artifact TYPE compiledartifact1,
         END OF params1.

* Component schema: CompiledArtifact1, object
  TYPES: BEGIN OF compiledartifact1,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assembly TYPE assembly,
           bytecode TYPE string,
           deps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           fingerprint TYPE string,
           name TYPE string,
           opcodes TYPE string,
           raw TYPE string,
           source TYPE string,
         END OF compiledartifact1.

* Component schema: Abi1, object
  TYPES: BEGIN OF abi1,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payable TYPE abap_bool,
           statemutability TYPE string,
           type TYPE string,
           anonymous TYPE abap_bool,
           name TYPE string,
         END OF abi1.

* Component schema: Input1, object
  TYPES: BEGIN OF input1,
           indexed TYPE abap_bool,
           name TYPE string,
           type TYPE string,
         END OF input1.

* Component schema: Assembly, object
  TYPES: BEGIN OF subassembly__data,
           dummy_workaround TYPE i,
         END OF subassembly__data.
  TYPES: BEGIN OF assembly,
           _code TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           _data TYPE subassembly__data,
         END OF assembly.

* Component schema: Code, object
  TYPES: BEGIN OF code,
           begin TYPE i,
           end TYPE i,
           name TYPE string,
           value TYPE string,
         END OF code.

* Component schema: generatedObject, object
  TYPES: BEGIN OF generatedobject,
           _auxdata TYPE string,
           _code TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
         END OF generatedobject.

* Component schema: generatedObject1, object
  TYPES: BEGIN OF subgeneratedobject1__data,
           dummy_workaround TYPE i,
         END OF subgeneratedobject1__data.
  TYPES: BEGIN OF generatedobject1,
           _code TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           _data TYPE subgeneratedobject1__data,
         END OF generatedobject1.

* Component schema: Dep, object
  TYPES: BEGIN OF dep,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assembly TYPE assembly,
           bytecode TYPE string,
           deps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           fingerprint TYPE string,
           name TYPE string,
           opcodes TYPE string,
           raw TYPE string,
           source TYPE string,
         END OF dep.

* Component schema: Abi2, object
  TYPES: BEGIN OF abi2,
           constant TYPE abap_bool,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           name TYPE string,
           outputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payable TYPE abap_bool,
           statemutability TYPE string,
           type TYPE string,
           anonymous TYPE abap_bool,
         END OF abi2.

* Component schema: Input2, object
  TYPES: BEGIN OF input2,
           name TYPE string,
           type TYPE string,
           indexed TYPE abap_bool,
         END OF input2.

* Component schema: Output, object
  TYPES: BEGIN OF output,
           name TYPE string,
           type TYPE string,
         END OF output.

* Component schema: Dep1, object
  TYPES: BEGIN OF dep1,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assembly TYPE assembly2,
           bytecode TYPE string,
           deps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           fingerprint TYPE string,
           name TYPE string,
           opcodes TYPE string,
           raw TYPE string,
           source TYPE string,
         END OF dep1.

* Component schema: Abi3, object
  TYPES: BEGIN OF abi3,
           constant TYPE abap_bool,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           name TYPE string,
           outputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payable TYPE abap_bool,
           statemutability TYPE string,
           type TYPE string,
           anonymous TYPE abap_bool,
         END OF abi3.

* Component schema: Assembly2, object
  TYPES: BEGIN OF subassembly2__data,
           dummy_workaround TYPE i,
         END OF subassembly2__data.
  TYPES: BEGIN OF assembly2,
           _code TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           _data TYPE subassembly2__data,
         END OF assembly2.

* Component schema: Dep2, object
  TYPES: BEGIN OF dep2,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assembly TYPE string,
           bytecode TYPE string,
           deps TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           fingerprint TYPE string,
           name TYPE string,
           opcodes TYPE string,
           raw TYPE string,
           source TYPE string,
         END OF dep2.

* Component schema: Abi4, object
  TYPES: BEGIN OF abi4,
           constant TYPE abap_bool,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           name TYPE string,
           outputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payable TYPE abap_bool,
           statemutability TYPE string,
           type TYPE string,
         END OF abi4.

* Component schema: Input4, object
  TYPES: BEGIN OF input4,
           name TYPE string,
           type TYPE string,
         END OF input4.

* Component schema: Dep3, object
  TYPES: BEGIN OF dep3,
           abi TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           assembly TYPE string,
           bytecode TYPE string,
           deps TYPE string,
           fingerprint TYPE string,
           name TYPE string,
           opcodes TYPE string,
           raw TYPE string,
           source TYPE string,
         END OF dep3.

* Component schema: Abi5, object
  TYPES: BEGIN OF abi5,
           constant TYPE abap_bool,
           inputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           name TYPE string,
           outputs TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           payable TYPE abap_bool,
           statemutability TYPE string,
           type TYPE string,
         END OF abi5.

* Component schema: ExecutecontractRequest, object
  TYPES: BEGIN OF executecontractrequest,
           method TYPE string,
           params TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           value TYPE i,
           account_id TYPE string,
         END OF executecontractrequest.

* Component schema: ExecutereadonlycontractRequest, object
  TYPES: BEGIN OF executereadonlycontractrequest,
           method TYPE string,
           params TYPE STANDARD TABLE OF string WITH DEFAULT KEY, " todo, handle array
           account_id TYPE string,
         END OF executereadonlycontractrequest.

* GET - "List connectors"
* Operation id: Listconnectors
* Parameter: public, required, query
* Parameter: content-type, required, header
* Response: 200
  METHODS listconnectors
    IMPORTING
      public TYPE abap_bool
      content_type TYPE string
    RAISING cx_static_check.

* POST - "Create connector"
* Operation id: Createconnector
* Response: 200
* Body ref: #/components/schemas/CreateconnectorRequest
  METHODS createconnector
    IMPORTING
      body TYPE createconnectorrequest
    RAISING cx_static_check.

* GET - "Get connector details"
* Operation id: Getconnectordetails
* Parameter: connector_id, required, path
* Response: 200
  METHODS getconnectordetails
    IMPORTING
      connector_id TYPE string
    RAISING cx_static_check.

* DELETE - "Delete connector"
* Operation id: Deleteconnector
* Parameter: connector_id, required, path
* Response: 200
  METHODS deleteconnector
    IMPORTING
      connector_id TYPE string
    RAISING cx_static_check.

* PUT - "Update network"
* Operation id: Updatenetwork
* Parameter: connector_id, required, path
* Response: 200
  METHODS updatenetwork
    IMPORTING
      connector_id TYPE string
    RAISING cx_static_check.

* GET - "Get load balancer details"
* Operation id: Getloadbalancerdetails
* Parameter: connector_id, required, path
* Response: 200
  METHODS getloadbalancerdetails
    IMPORTING
      connector_id TYPE string
    RAISING cx_static_check.

* GET - "List networks"
* Operation id: Listnetworks
* Parameter: network_id, required, path
* Response: 200
  METHODS listnetworks
    IMPORTING
      network_id TYPE string
    RAISING cx_static_check.

* GET - "Get network detail"
* Operation id: Getnetworkdetail
* Parameter: connector_id, required, path
* Response: 200
  METHODS getnetworkdetail
    IMPORTING
      connector_id TYPE string
    RAISING cx_static_check.

* GET - "Get network status"
* Operation id: Getnetworkstatus
* Parameter: network_id, required, path
* Response: 200
  METHODS getnetworkstatus
    IMPORTING
      network_id TYPE string
    RAISING cx_static_check.

* POST - "Create network"
* Operation id: Createnetwork
* Response: 200
* Body ref: #/components/schemas/CreatenetworkRequest
  METHODS createnetwork
    IMPORTING
      body TYPE createnetworkrequest
    RAISING cx_static_check.

* POST - "Create accounts"
* Operation id: Createaccounts
* Response: 200
* Body ref: #/components/schemas/CreateaccountsRequest
  METHODS createaccounts
    IMPORTING
      body TYPE createaccountsrequest
    RAISING cx_static_check.

* GET - "List accounts"
* Operation id: Listaccounts
* Parameter: content-type, required, header
* Response: 200
  METHODS listaccounts
    IMPORTING
      content_type TYPE string
    RAISING cx_static_check.

* GET - "Get account details"
* Operation id: Getaccountdetails
* Parameter: content-type, required, header
* Parameter: account_id, required, path
* Response: 200
  METHODS getaccountdetails
    IMPORTING
      content_type TYPE string
      account_id TYPE string
    RAISING cx_static_check.

* GET - "List HD wallets"
* Operation id: ListHDwallets
* Parameter: content-type, required, header
* Response: 200
  METHODS listhdwallets
    IMPORTING
      content_type TYPE string
    RAISING cx_static_check.

* POST - "Create HD wallet"
* Operation id: CreateHDwallet
* Response: 200
* Body ref: #/components/schemas/CreateHDwalletRequest
  METHODS createhdwallet
    IMPORTING
      body TYPE createhdwalletrequest
    RAISING cx_static_check.

* GET - "List HD wallet accounts"
* Operation id: ListHDwalletaccounts
* Parameter: page, required, query
* Parameter: content-type, required, header
* Parameter: wallet_id, required, path
* Response: 200
  METHODS listhdwalletaccounts
    IMPORTING
      page TYPE i
      content_type TYPE string
      wallet_id TYPE string
    RAISING cx_static_check.

* GET - "List transactions"
* Operation id: Listtransactions
* Parameter: content-type, required, header
* Response: 200
  METHODS listtransactions
    IMPORTING
      content_type TYPE string
    RAISING cx_static_check.

* POST - "Create & broadcast transaction - Account"
* Operation id: Create&broadcasttransaction-Account
* Response: 200
* Body ref: #/components/schemas/Create%26broadcasttransaction-AccountRequest
  METHODS create&broadcasttransaction_ac
    RAISING cx_static_check.

* GET - "Get transaction details"
* Operation id: Gettransactiondetails
* Parameter: content-type, required, header
* Parameter: transaction_id, required, path
* Response: 200
  METHODS gettransactiondetails
    IMPORTING
      content_type TYPE string
      transaction_id TYPE string
    RAISING cx_static_check.

* GET - "List contracts"
* Operation id: Listcontracts
* Parameter: content-type, required, header
* Response: 200
  METHODS listcontracts
    IMPORTING
      content_type TYPE string
    RAISING cx_static_check.

* POST - "Deploy contract"
* Operation id: Deploycontract
* Response: 200
* Body ref: #/components/schemas/DeploycontractRequest
  METHODS deploycontract
    IMPORTING
      body TYPE deploycontractrequest
    RAISING cx_static_check.

* GET - "Get contract detail"
* Operation id: Getcontractdetail
* Parameter: content-type, required, header
* Parameter: contract_id, required, path
* Response: 200
  METHODS getcontractdetail
    IMPORTING
      content_type TYPE string
      contract_id TYPE string
    RAISING cx_static_check.

* POST - "Execute contract"
* Operation id: Executecontract
* Parameter: contract_id, required, path
* Response: 200
* Body ref: #/components/schemas/ExecutecontractRequest
  METHODS executecontract
    IMPORTING
      contract_id TYPE string
      body TYPE executecontractrequest
    RAISING cx_static_check.

* POST - "Execute read only contract"
* Operation id: Executereadonlycontract
* Response: 200
* Body ref: #/components/schemas/ExecutereadonlycontractRequest
  METHODS executereadonlycontract
    IMPORTING
      body TYPE executereadonlycontractrequest
    RAISING cx_static_check.

ENDINTERFACE.
