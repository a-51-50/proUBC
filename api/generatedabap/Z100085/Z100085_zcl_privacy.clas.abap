CLASS Z100085_zcl_privacy DEFINITION PUBLIC.
* Generated by abap-openapi-client
* Privacy, 1.0
  PUBLIC SECTION.
    INTERFACES Z100085_zif_privacy.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_createcircuitrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createcircuitrequest) TYPE Z100085_zif_privacy=>createcircuitrequest
      RAISING cx_static_check.
    METHODS parse_proverequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(proverequest) TYPE Z100085_zif_privacy=>proverequest
      RAISING cx_static_check.
    METHODS parse_verifyrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(verifyrequest) TYPE Z100085_zif_privacy=>verifyrequest
      RAISING cx_static_check.
    METHODS parse_witness
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(witness) TYPE Z100085_zif_privacy=>witness
      RAISING cx_static_check.
ENDCLASS.

CLASS Z100085_zcl_privacy IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_createcircuitrequest.
    createcircuitrequest-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
    createcircuitrequest-proving_scheme = mo_json->value_string( iv_prefix && '/proving_scheme' ).
    createcircuitrequest-curve = mo_json->value_string( iv_prefix && '/curve' ).
    createcircuitrequest-provider = mo_json->value_string( iv_prefix && '/provider' ).
    createcircuitrequest-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_proverequest.
    proverequest-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
    proverequest-proving_scheme = mo_json->value_string( iv_prefix && '/proving_scheme' ).
    proverequest-curve = mo_json->value_string( iv_prefix && '/curve' ).
    proverequest-provider = mo_json->value_string( iv_prefix && '/provider' ).
    proverequest-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_verifyrequest.
    verifyrequest-witness: = parse_witness( iv_prefix && '/witness:' ).
    verifyrequest-proof = mo_json->value_string( iv_prefix && '/proof' ).
  ENDMETHOD.

  METHOD parse_witness.
    witness-x = mo_json->value_string( iv_prefix && '/X' ).
    witness-y = mo_json->value_string( iv_prefix && '/Y' ).
  ENDMETHOD.

  METHOD Z100085_zif_privacy~listcircuits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/circuits'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_privacy~createcircuit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/circuits'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/CreatecircuitRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_privacy~verify.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/circuits/{circuit_id}/verify'.
    lv_temp = circuit_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{circuit_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/VerifyRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

ENDCLASS.
