CLASS Z100085_zcl_nchain DEFINITION PUBLIC.
* Generated by abap-openapi-client
* NChain_OG, 1.0
  PUBLIC SECTION.
    INTERFACES Z100085_zif_nchain.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_createconnectorrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createconnectorrequest) TYPE Z100085_zif_nchain=>createconnectorrequest
      RAISING cx_static_check.
    METHODS parse_config
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(config) TYPE Z100085_zif_nchain=>config
      RAISING cx_static_check.
    METHODS parse_credentials
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(credentials) TYPE Z100085_zif_nchain=>credentials
      RAISING cx_static_check.
    METHODS parse_security
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(security) TYPE Z100085_zif_nchain=>security
      RAISING cx_static_check.
    METHODS parse_ingress
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ingress) TYPE Z100085_zif_nchain=>ingress
      RAISING cx_static_check.
    METHODS parse_m00000
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(m00000) TYPE Z100085_zif_nchain=>m00000
      RAISING cx_static_check.
    METHODS parse_createnetworkrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createnetworkrequest) TYPE Z100085_zif_nchain=>createnetworkrequest
      RAISING cx_static_check.
    METHODS parse_config1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(config1) TYPE Z100085_zif_nchain=>config1
      RAISING cx_static_check.
    METHODS parse_chainspec
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(chainspec) TYPE Z100085_zif_nchain=>chainspec
      RAISING cx_static_check.
    METHODS parse_config2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(config2) TYPE Z100085_zif_nchain=>config2
      RAISING cx_static_check.
    METHODS parse_createaccountsrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createaccountsrequest) TYPE Z100085_zif_nchain=>createaccountsrequest
      RAISING cx_static_check.
    METHODS parse_createhdwalletrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(createhdwalletrequest) TYPE Z100085_zif_nchain=>createhdwalletrequest
      RAISING cx_static_check.
    METHODS parse_create&broadcasttransact
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(create&broadcasttransaction_ac) TYPE Z100085_zif_nchain=>create&broadcasttransaction_ac
      RAISING cx_static_check.
    METHODS parse_create&broadcasttransa01
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(create&broadcasttransaction_wa) TYPE Z100085_zif_nchain=>create&broadcasttransaction_wa
      RAISING cx_static_check.
    METHODS parse_deploycontractrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deploycontractrequest) TYPE Z100085_zif_nchain=>deploycontractrequest
      RAISING cx_static_check.
    METHODS parse_params
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(params) TYPE Z100085_zif_nchain=>params
      RAISING cx_static_check.
    METHODS parse_compiledartifact
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(compiledartifact) TYPE Z100085_zif_nchain=>compiledartifact
      RAISING cx_static_check.
    METHODS parse_abi
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi) TYPE Z100085_zif_nchain=>abi
      RAISING cx_static_check.
    METHODS parse_input
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(input) TYPE Z100085_zif_nchain=>input
      RAISING cx_static_check.
    METHODS parse_baselinedeployregistryco
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(baselinedeployregistrycontract) TYPE Z100085_zif_nchain=>baselinedeployregistrycontract
      RAISING cx_static_check.
    METHODS parse_params1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(params1) TYPE Z100085_zif_nchain=>params1
      RAISING cx_static_check.
    METHODS parse_compiledartifact1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(compiledartifact1) TYPE Z100085_zif_nchain=>compiledartifact1
      RAISING cx_static_check.
    METHODS parse_abi1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi1) TYPE Z100085_zif_nchain=>abi1
      RAISING cx_static_check.
    METHODS parse_input1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(input1) TYPE Z100085_zif_nchain=>input1
      RAISING cx_static_check.
    METHODS parse_assembly
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(assembly) TYPE Z100085_zif_nchain=>assembly
      RAISING cx_static_check.
    METHODS parse_code
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code) TYPE Z100085_zif_nchain=>code
      RAISING cx_static_check.
    METHODS parse_generatedobject
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(generatedobject) TYPE Z100085_zif_nchain=>generatedobject
      RAISING cx_static_check.
    METHODS parse_generatedobject1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(generatedobject1) TYPE Z100085_zif_nchain=>generatedobject1
      RAISING cx_static_check.
    METHODS parse_dep
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dep) TYPE Z100085_zif_nchain=>dep
      RAISING cx_static_check.
    METHODS parse_abi2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi2) TYPE Z100085_zif_nchain=>abi2
      RAISING cx_static_check.
    METHODS parse_input2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(input2) TYPE Z100085_zif_nchain=>input2
      RAISING cx_static_check.
    METHODS parse_output
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(output) TYPE Z100085_zif_nchain=>output
      RAISING cx_static_check.
    METHODS parse_dep1
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dep1) TYPE Z100085_zif_nchain=>dep1
      RAISING cx_static_check.
    METHODS parse_abi3
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi3) TYPE Z100085_zif_nchain=>abi3
      RAISING cx_static_check.
    METHODS parse_assembly2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(assembly2) TYPE Z100085_zif_nchain=>assembly2
      RAISING cx_static_check.
    METHODS parse_dep2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dep2) TYPE Z100085_zif_nchain=>dep2
      RAISING cx_static_check.
    METHODS parse_abi4
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi4) TYPE Z100085_zif_nchain=>abi4
      RAISING cx_static_check.
    METHODS parse_input4
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(input4) TYPE Z100085_zif_nchain=>input4
      RAISING cx_static_check.
    METHODS parse_dep3
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(dep3) TYPE Z100085_zif_nchain=>dep3
      RAISING cx_static_check.
    METHODS parse_abi5
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(abi5) TYPE Z100085_zif_nchain=>abi5
      RAISING cx_static_check.
    METHODS parse_executecontractrequest
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(executecontractrequest) TYPE Z100085_zif_nchain=>executecontractrequest
      RAISING cx_static_check.
    METHODS parse_executereadonlycontractr
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(executereadonlycontractrequest) TYPE Z100085_zif_nchain=>executereadonlycontractrequest
      RAISING cx_static_check.
ENDCLASS.

CLASS Z100085_zcl_nchain IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_createconnectorrequest.
    createconnectorrequest-name = mo_json->value_string( iv_prefix && '/name' ).
    createconnectorrequest-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    createconnectorrequest-type = mo_json->value_string( iv_prefix && '/type' ).
    createconnectorrequest-config = parse_config( iv_prefix && '/config' ).
  ENDMETHOD.

  METHOD parse_config.
    config-region = mo_json->value_string( iv_prefix && '/region' ).
    config-target_id = mo_json->value_string( iv_prefix && '/target_id' ).
    config-provider_id = mo_json->value_string( iv_prefix && '/provider_id' ).
    config-role = mo_json->value_string( iv_prefix && '/role' ).
    config-container = mo_json->value_string( iv_prefix && '/container' ).
    config-credentials = parse_credentials( iv_prefix && '/credentials' ).
    config-image = mo_json->value_string( iv_prefix && '/image' ).
    config-api_port = mo_json->value_string( iv_prefix && '/api_port' ).
    config-security = parse_security( iv_prefix && '/security' ).
  ENDMETHOD.

  METHOD parse_credentials.
    credentials-aws_access_key_id = mo_json->value_string( iv_prefix && '/aws_access_key_id' ).
    credentials-aws_secret_access_key = mo_json->value_string( iv_prefix && '/aws_secret_access_key' ).
  ENDMETHOD.

  METHOD parse_security.
    security-egress = mo_json->value_string( iv_prefix && '/egress' ).
    security-ingress = parse_ingress( iv_prefix && '/ingress' ).
  ENDMETHOD.

  METHOD parse_ingress.
    ingress-0_0_0_0_0 = parse_m00000( iv_prefix && '/0.0.0.0/0' ).
  ENDMETHOD.

  METHOD parse_m00000.
* todo, array, tcp
* todo, array, udp
  ENDMETHOD.

  METHOD parse_createnetworkrequest.
    createnetworkrequest-name = mo_json->value_string( iv_prefix && '/name' ).
    createnetworkrequest-cloneable = mo_json->value_boolean( iv_prefix && '/cloneable' ).
    createnetworkrequest-config = parse_config1( iv_prefix && '/config' ).
  ENDMETHOD.

  METHOD parse_config1.
    config1-native_currency = mo_json->value_string( iv_prefix && '/native_currency' ).
    config1-platform = mo_json->value_string( iv_prefix && '/platform' ).
    config1-engine_id = mo_json->value_string( iv_prefix && '/engine_id' ).
    config1-chain = mo_json->value_string( iv_prefix && '/chain' ).
    config1-protocol_id = mo_json->value_string( iv_prefix && '/protocol_id' ).
    config1-chainspec = parse_chainspec( iv_prefix && '/chainspec' ).
  ENDMETHOD.

  METHOD parse_chainspec.
    chainspec-config = parse_config2( iv_prefix && '/config' ).
    chainspec-coinbase = mo_json->value_string( iv_prefix && '/coinbase' ).
    chainspec-difficulty = mo_json->value_string( iv_prefix && '/difficulty' ).
    chainspec-extradata = mo_json->value_string( iv_prefix && '/extraData' ).
    chainspec-gaslimit = mo_json->value_string( iv_prefix && '/gasLimit' ).
    chainspec-nonce = mo_json->value_string( iv_prefix && '/nonce' ).
    chainspec-mixhash = mo_json->value_string( iv_prefix && '/mixhash' ).
    chainspec-parenthash = mo_json->value_string( iv_prefix && '/parentHash' ).
    chainspec-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
  ENDMETHOD.

  METHOD parse_config2.
    config2-homesteadblock = mo_json->value_string( iv_prefix && '/homesteadBlock' ).
    config2-eip150block = mo_json->value_string( iv_prefix && '/eip150Block' ).
    config2-eip155block = mo_json->value_string( iv_prefix && '/eip155Block' ).
    config2-eip158block = mo_json->value_string( iv_prefix && '/eip158Block' ).
    config2-byzantiumblock = mo_json->value_string( iv_prefix && '/byzantiumBlock' ).
    config2-constantinopleblock = mo_json->value_string( iv_prefix && '/constantinopleBlock' ).
    config2-petersburgblock = mo_json->value_string( iv_prefix && '/petersburgBlock' ).
  ENDMETHOD.

  METHOD parse_createaccountsrequest.
    createaccountsrequest-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
  ENDMETHOD.

  METHOD parse_createhdwalletrequest.
    createhdwalletrequest-purpose = mo_json->value_string( iv_prefix && '/purpose' ).
  ENDMETHOD.

  METHOD parse_create&broadcasttransact.
    create&broadcasttransaction_ac-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    create&broadcasttransaction_ac-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    create&broadcasttransaction_ac-to = mo_json->value_string( iv_prefix && '/to' ).
    create&broadcasttransaction_ac-value = mo_json->value_string( iv_prefix && '/value' ).
    create&broadcasttransaction_ac-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
  ENDMETHOD.

  METHOD parse_create&broadcasttransa01.
    create&broadcasttransaction_wa-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    create&broadcasttransaction_wa-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    create&broadcasttransaction_wa-from = mo_json->value_string( iv_prefix && '/from' ).
    create&broadcasttransaction_wa-to = mo_json->value_string( iv_prefix && '/to' ).
    create&broadcasttransaction_wa-value = mo_json->value_string( iv_prefix && '/value' ).
    create&broadcasttransaction_wa-wallet_id = mo_json->value_string( iv_prefix && '/wallet_id' ).
    create&broadcasttransaction_wa-hd_derivation_path = mo_json->value_string( iv_prefix && '/hd_derivation_path' ).
  ENDMETHOD.

  METHOD parse_deploycontractrequest.
    deploycontractrequest-application_id = mo_json->value_string( iv_prefix && '/application_id' ).
    deploycontractrequest-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    deploycontractrequest-name = mo_json->value_string( iv_prefix && '/name' ).
    deploycontractrequest-address = mo_json->value_string( iv_prefix && '/address' ).
    deploycontractrequest-params = parse_params( iv_prefix && '/params' ).
  ENDMETHOD.

  METHOD parse_params.
    params-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
    params-compiled_artifact = parse_compiledartifact( iv_prefix && '/compiled_artifact' ).
  ENDMETHOD.

  METHOD parse_compiledartifact.
    compiledartifact-contractname = mo_json->value_string( iv_prefix && '/contractName' ).
* todo, array, abi
    compiledartifact-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
    compiledartifact-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi.
    abi-anonymous = mo_json->value_boolean( iv_prefix && '/anonymous' ).
* todo, array, inputs
    abi-name = mo_json->value_string( iv_prefix && '/name' ).
    abi-type = mo_json->value_string( iv_prefix && '/type' ).
* todo, array, outputs
    abi-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
  ENDMETHOD.

  METHOD parse_input.
    input-indexed = mo_json->value_boolean( iv_prefix && '/indexed' ).
    input-internaltype = mo_json->value_string( iv_prefix && '/internalType' ).
    input-name = mo_json->value_string( iv_prefix && '/name' ).
    input-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_baselinedeployregistryco.
    baselinedeployregistrycontract-application_id = mo_json->value_string( iv_prefix && '/application_id' ).
    baselinedeployregistrycontract-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    baselinedeployregistrycontract-name = mo_json->value_string( iv_prefix && '/name' ).
    baselinedeployregistrycontract-address = mo_json->value_string( iv_prefix && '/address' ).
    baselinedeployregistrycontract-params = parse_params1( iv_prefix && '/params' ).
  ENDMETHOD.

  METHOD parse_params1.
    params1-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
    params1-compiled_artifact = parse_compiledartifact1( iv_prefix && '/compiled_artifact' ).
  ENDMETHOD.

  METHOD parse_compiledartifact1.
* todo, array, abi
    compiledartifact1-assembly = parse_assembly( iv_prefix && '/assembly' ).
    compiledartifact1-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
* todo, array, deps
    compiledartifact1-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    compiledartifact1-name = mo_json->value_string( iv_prefix && '/name' ).
    compiledartifact1-opcodes = mo_json->value_string( iv_prefix && '/opcodes' ).
    compiledartifact1-raw = mo_json->value_string( iv_prefix && '/raw' ).
    compiledartifact1-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi1.
* todo, array, inputs
    abi1-payable = mo_json->value_boolean( iv_prefix && '/payable' ).
    abi1-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
    abi1-type = mo_json->value_string( iv_prefix && '/type' ).
    abi1-anonymous = mo_json->value_boolean( iv_prefix && '/anonymous' ).
    abi1-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_input1.
    input1-indexed = mo_json->value_boolean( iv_prefix && '/indexed' ).
    input1-name = mo_json->value_string( iv_prefix && '/name' ).
    input1-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_assembly.
* todo, array, _code
  ENDMETHOD.

  METHOD parse_code.
    code-begin = mo_json->value_string( iv_prefix && '/begin' ).
    code-end = mo_json->value_string( iv_prefix && '/end' ).
    code-name = mo_json->value_string( iv_prefix && '/name' ).
    code-value = mo_json->value_string( iv_prefix && '/value' ).
  ENDMETHOD.

  METHOD parse_generatedobject.
    generatedobject-_auxdata = mo_json->value_string( iv_prefix && '/.auxdata' ).
* todo, array, _code
  ENDMETHOD.

  METHOD parse_generatedobject1.
* todo, array, _code
  ENDMETHOD.

  METHOD parse_dep.
* todo, array, abi
    dep-assembly = parse_assembly( iv_prefix && '/assembly' ).
    dep-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
* todo, array, deps
    dep-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    dep-name = mo_json->value_string( iv_prefix && '/name' ).
    dep-opcodes = mo_json->value_string( iv_prefix && '/opcodes' ).
    dep-raw = mo_json->value_string( iv_prefix && '/raw' ).
    dep-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi2.
    abi2-constant = mo_json->value_boolean( iv_prefix && '/constant' ).
* todo, array, inputs
    abi2-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, outputs
    abi2-payable = mo_json->value_boolean( iv_prefix && '/payable' ).
    abi2-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
    abi2-type = mo_json->value_string( iv_prefix && '/type' ).
    abi2-anonymous = mo_json->value_boolean( iv_prefix && '/anonymous' ).
  ENDMETHOD.

  METHOD parse_input2.
    input2-name = mo_json->value_string( iv_prefix && '/name' ).
    input2-type = mo_json->value_string( iv_prefix && '/type' ).
    input2-indexed = mo_json->value_boolean( iv_prefix && '/indexed' ).
  ENDMETHOD.

  METHOD parse_output.
    output-name = mo_json->value_string( iv_prefix && '/name' ).
    output-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_dep1.
* todo, array, abi
    dep1-assembly = parse_assembly2( iv_prefix && '/assembly' ).
    dep1-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
* todo, array, deps
    dep1-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    dep1-name = mo_json->value_string( iv_prefix && '/name' ).
    dep1-opcodes = mo_json->value_string( iv_prefix && '/opcodes' ).
    dep1-raw = mo_json->value_string( iv_prefix && '/raw' ).
    dep1-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi3.
    abi3-constant = mo_json->value_boolean( iv_prefix && '/constant' ).
* todo, array, inputs
    abi3-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, outputs
    abi3-payable = mo_json->value_boolean( iv_prefix && '/payable' ).
    abi3-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
    abi3-type = mo_json->value_string( iv_prefix && '/type' ).
    abi3-anonymous = mo_json->value_boolean( iv_prefix && '/anonymous' ).
  ENDMETHOD.

  METHOD parse_assembly2.
* todo, array, _code
  ENDMETHOD.

  METHOD parse_dep2.
* todo, array, abi
    dep2-assembly = mo_json->value_string( iv_prefix && '/assembly' ).
    dep2-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
* todo, array, deps
    dep2-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    dep2-name = mo_json->value_string( iv_prefix && '/name' ).
    dep2-opcodes = mo_json->value_string( iv_prefix && '/opcodes' ).
    dep2-raw = mo_json->value_string( iv_prefix && '/raw' ).
    dep2-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi4.
    abi4-constant = mo_json->value_boolean( iv_prefix && '/constant' ).
* todo, array, inputs
    abi4-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, outputs
    abi4-payable = mo_json->value_boolean( iv_prefix && '/payable' ).
    abi4-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
    abi4-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_input4.
    input4-name = mo_json->value_string( iv_prefix && '/name' ).
    input4-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_dep3.
* todo, array, abi
    dep3-assembly = mo_json->value_string( iv_prefix && '/assembly' ).
    dep3-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
    dep3-deps = mo_json->value_string( iv_prefix && '/deps' ).
    dep3-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    dep3-name = mo_json->value_string( iv_prefix && '/name' ).
    dep3-opcodes = mo_json->value_string( iv_prefix && '/opcodes' ).
    dep3-raw = mo_json->value_string( iv_prefix && '/raw' ).
    dep3-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_abi5.
    abi5-constant = mo_json->value_boolean( iv_prefix && '/constant' ).
* todo, array, inputs
    abi5-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, array, outputs
    abi5-payable = mo_json->value_boolean( iv_prefix && '/payable' ).
    abi5-statemutability = mo_json->value_string( iv_prefix && '/stateMutability' ).
    abi5-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_executecontractrequest.
    executecontractrequest-method = mo_json->value_string( iv_prefix && '/method' ).
* todo, array, params
    executecontractrequest-value = mo_json->value_string( iv_prefix && '/value' ).
    executecontractrequest-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
  ENDMETHOD.

  METHOD parse_executereadonlycontractr.
    executereadonlycontractrequest-method = mo_json->value_string( iv_prefix && '/method' ).
* todo, array, params
    executereadonlycontractrequest-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listconnectors.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors'.
    lv_temp = public.
    CONDENSE lv_temp.
    mi_client->request->set_form_field( name = 'public' value = lv_temp ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~createconnector.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/CreateconnectorRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getconnectordetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors/{connector_id}'.
    lv_temp = connector_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{connector_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~deleteconnector.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors/{connector_id}'.
    lv_temp = connector_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{connector_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~updatenetwork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors/{connector_id}'.
    lv_temp = connector_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{connector_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getloadbalancerdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/connectors/{connector_id}/load_balancers'.
    lv_temp = connector_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{connector_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listnetworks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/networks/{network_id}'.
    lv_temp = network_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{network_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getnetworkdetail.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/networks/{connector_id}'.
    lv_temp = connector_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{connector_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getnetworkstatus.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/networks/{network_id}/status'.
    lv_temp = network_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{network_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~createnetwork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/networks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/CreatenetworkRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~createaccounts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/accounts'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/CreateaccountsRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listaccounts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/accounts'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getaccountdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/accounts/{account_id}'.
    lv_temp = account_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{account_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listhdwallets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/wallets'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~createhdwallet.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/wallets'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/CreateHDwalletRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listhdwalletaccounts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/wallets/{wallet_id}/accounts'.
    lv_temp = wallet_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{wallet_id}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listtransactions.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/transactions'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~create&broadcasttransaction_ac.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/transactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~gettransactiondetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/transactions/{transaction_id}'.
    lv_temp = transaction_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{transaction_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~listcontracts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/contracts'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~deploycontract.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/contracts'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/DeploycontractRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~getcontractdetail.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/contracts/{contract_id}'.
    lv_temp = contract_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{contract_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    mi_client->request->set_header_field( name = 'content-type' value = content_type ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~executecontract.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/contracts/{contract_id}/execute'.
    lv_temp = contract_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{contract_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/ExecutecontractRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_nchain~executereadonlycontract.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/contracts/7f99f9de-c5db-48f9-a99f-41e1e8bd2f3b/execute'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/ExecutereadonlycontractRequest
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200.
    ENDCASE.
  ENDMETHOD.

ENDCLASS.
