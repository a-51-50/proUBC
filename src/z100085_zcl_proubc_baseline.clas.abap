CLASS z100085_zcl_proubc_baseline DEFINITION PUBLIC.
* Generated by abap-openapi-client
* Baseline API, v1.0.0
  PUBLIC SECTION.
    INTERFACES z100085_zif_proubc_baseline.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client
                                  iv_bpitenant_url type string.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    data lv_bpitenant_url type string.
    DATA mo_json TYPE REF TO z100085_zcl_oapi_json.
    DATA authtoken TYPE z100085_prvdrefreshtoken.
    DATA bpitoken TYPE z100085_prvdrefreshtoken.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_account
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(account) TYPE z100085_zif_proubc_baseline=>account
      RAISING   cx_static_check.
    METHODS parse_associateworkgroupuserre
      IMPORTING iv_prefix                            TYPE string
      RETURNING VALUE(associateworkgroupuserrequest) TYPE z100085_zif_proubc_baseline=>associateworkgroupuserrequest
      RAISING   cx_static_check.
    METHODS parse_authenticationrequest
      IMPORTING iv_prefix                    TYPE string
      RETURNING VALUE(authenticationrequest) TYPE z100085_zif_proubc_baseline=>authenticationrequest
      RAISING   cx_static_check.
    METHODS parse_authenticationresponse
      IMPORTING iv_prefix                     TYPE string
      RETURNING VALUE(authenticationresponse) TYPE z100085_zif_proubc_baseline=>authenticationresponse
      RAISING   cx_static_check.
    METHODS parse_baselinerecord
      IMPORTING iv_prefix             TYPE string
      RETURNING VALUE(baselinerecord) TYPE z100085_zif_proubc_baseline=>baselinerecord
      RAISING   cx_static_check.
    METHODS parse_businessobject
      IMPORTING iv_prefix             TYPE string
      RETURNING VALUE(businessobject) TYPE z100085_zif_proubc_baseline=>businessobject
      RAISING   cx_static_check.
    METHODS parse_chainspec
      IMPORTING iv_prefix        TYPE string
      RETURNING VALUE(chainspec) TYPE z100085_zif_proubc_baseline=>chainspec
      RAISING   cx_static_check.
    METHODS parse_circuit
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(circuit) TYPE z100085_zif_proubc_baseline=>circuit
      RAISING   cx_static_check.
    METHODS parse_compiledartifact
      IMPORTING iv_prefix               TYPE string
      RETURNING VALUE(compiledartifact) TYPE z100085_zif_proubc_baseline=>compiledartifact
      RAISING   cx_static_check.
    METHODS parse_config
      IMPORTING iv_prefix     TYPE string
      RETURNING VALUE(config) TYPE z100085_zif_proubc_baseline=>config
      RAISING   cx_static_check.
    METHODS parse_connector
      IMPORTING iv_prefix        TYPE string
      RETURNING VALUE(connector) TYPE z100085_zif_proubc_baseline=>connector
      RAISING   cx_static_check.
    METHODS parse_connectorconfig
      IMPORTING iv_prefix              TYPE string
      RETURNING VALUE(connectorconfig) TYPE z100085_zif_proubc_baseline=>connectorconfig
      RAISING   cx_static_check.
    METHODS parse_contract
      IMPORTING iv_prefix       TYPE string
      RETURNING VALUE(contract) TYPE z100085_zif_proubc_baseline=>contract
      RAISING   cx_static_check.
    METHODS parse_contractparams
      IMPORTING iv_prefix             TYPE string
      RETURNING VALUE(contractparams) TYPE z100085_zif_proubc_baseline=>contractparams
      RAISING   cx_static_check.
    METHODS parse_createsealorunsealkey
      IMPORTING iv_prefix                    TYPE string
      RETURNING VALUE(createsealorunsealkey) TYPE z100085_zif_proubc_baseline=>createsealorunsealkey
      RAISING   cx_static_check.
    METHODS parse_credentials
      IMPORTING iv_prefix          TYPE string
      RETURNING VALUE(credentials) TYPE z100085_zif_proubc_baseline=>credentials
      RAISING   cx_static_check.
    METHODS parse_deploycontract
      IMPORTING iv_prefix             TYPE string
      RETURNING VALUE(deploycontract) TYPE z100085_zif_proubc_baseline=>ty_deploycontract
      RAISING   cx_static_check.
    METHODS parse_derivekeyrequest
      IMPORTING iv_prefix               TYPE string
      RETURNING VALUE(derivekeyrequest) TYPE z100085_zif_proubc_baseline=>derivekeyrequest
      RAISING   cx_static_check.
    METHODS parse_error
      IMPORTING iv_prefix    TYPE string
      RETURNING VALUE(error) TYPE z100085_zif_proubc_baseline=>error
      RAISING   cx_static_check.
    METHODS parse_executecontractrequest
      IMPORTING iv_prefix                     TYPE string
      RETURNING VALUE(executecontractrequest) TYPE z100085_zif_proubc_baseline=>executecontractrequest
      RAISING   cx_static_check.
    METHODS parse_executecontractresponse
      IMPORTING iv_prefix                      TYPE string
      RETURNING VALUE(executecontractresponse) TYPE z100085_zif_proubc_baseline=>executecontractresponse
      RAISING   cx_static_check.
    METHODS parse_ingress
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(ingress) TYPE string
      RAISING   cx_static_check.
    METHODS parse_issueverifiablecredentia
      IMPORTING iv_prefix                        TYPE string
      RETURNING VALUE(issueverifiablecredential) TYPE z100085_zif_proubc_baseline=>issueverifiablecredential
      RAISING   cx_static_check.
    METHODS parse_jwk
      IMPORTING iv_prefix  TYPE string
      RETURNING VALUE(jwk) TYPE z100085_zif_proubc_baseline=>jwk
      RAISING   cx_static_check.
    METHODS parse_key
      IMPORTING iv_prefix  TYPE string
      RETURNING VALUE(key) TYPE z100085_zif_proubc_baseline=>key
      RAISING   cx_static_check.
    METHODS parse_lastblockheader
      IMPORTING iv_prefix              TYPE string
      RETURNING VALUE(lastblockheader) TYPE z100085_zif_proubc_baseline=>lastblockheader
      RAISING   cx_static_check.
    METHODS parse_loadbalancer
      IMPORTING iv_prefix           TYPE string
      RETURNING VALUE(loadbalancer) TYPE z100085_zif_proubc_baseline=>loadbalancer
      RAISING   cx_static_check.
    METHODS parse_logmessage
      IMPORTING iv_prefix         TYPE string
      RETURNING VALUE(logmessage) TYPE z100085_zif_proubc_baseline=>logmessage
      RAISING   cx_static_check.
    METHODS parse_message
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(message) TYPE z100085_zif_proubc_baseline=>message
      RAISING   cx_static_check.
    METHODS parse_network
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(network) TYPE z100085_zif_proubc_baseline=>network
      RAISING   cx_static_check.
    METHODS parse_networkstatus
      IMPORTING iv_prefix            TYPE string
      RETURNING VALUE(networkstatus) TYPE z100085_zif_proubc_baseline=>networkstatus
      RAISING   cx_static_check.
    METHODS parse_openidconfig
      IMPORTING iv_prefix           TYPE string
      RETURNING VALUE(openidconfig) TYPE z100085_zif_proubc_baseline=>openidconfig
      RAISING   cx_static_check.
    METHODS parse_organization
      IMPORTING iv_prefix           TYPE string
      RETURNING VALUE(organization) TYPE z100085_zif_proubc_baseline=>organization
      RAISING   cx_static_check.
    METHODS parse_participant
      IMPORTING iv_prefix          TYPE string
      RETURNING VALUE(participant) TYPE z100085_zif_proubc_baseline=>participant
      RAISING   cx_static_check.
    METHODS parse_protocolmessage
      IMPORTING iv_prefix              TYPE string
      RETURNING VALUE(protocolmessage) TYPE z100085_zif_proubc_baseline=>protocolmessage
      RAISING   cx_static_check.
    METHODS parse_protocolmessagepayload
      IMPORTING iv_prefix                     TYPE string
      RETURNING VALUE(protocolmessagepayload) TYPE z100085_zif_proubc_baseline=>protocolmessage
      RAISING   cx_static_check.
    METHODS parse_proverequest
      IMPORTING iv_prefix           TYPE string
      RETURNING VALUE(proverequest) TYPE z100085_zif_proubc_baseline=>proverequest
      RAISING   cx_static_check.
    METHODS parse_secret
      IMPORTING iv_prefix     TYPE string
      RETURNING VALUE(secret) TYPE z100085_zif_proubc_baseline=>secret
      RAISING   cx_static_check.
    METHODS parse_security
      IMPORTING iv_prefix       TYPE string
      RETURNING VALUE(security) TYPE z100085_zif_proubc_baseline=>security
      RAISING   cx_static_check.
    METHODS parse_token
      IMPORTING iv_prefix    TYPE string
      RETURNING VALUE(token) TYPE z100085_zif_proubc_baseline=>token
      RAISING   cx_static_check.
    METHODS parse_transaction
      IMPORTING iv_prefix          TYPE string
      RETURNING VALUE(transaction) TYPE z100085_zif_proubc_baseline=>transaction
      RAISING   cx_static_check.
    METHODS parse_unsealvaultrequest
      IMPORTING iv_prefix                 TYPE string
      RETURNING VALUE(unsealvaultrequest) TYPE z100085_zif_proubc_baseline=>unsealvaultrequest
      RAISING   cx_static_check.
    METHODS parse_user
      IMPORTING iv_prefix   TYPE string
      RETURNING VALUE(user) TYPE z100085_zif_proubc_baseline=>user
      RAISING   cx_static_check.
    METHODS parse_vault
      IMPORTING iv_prefix    TYPE string
      RETURNING VALUE(vault) TYPE z100085_zif_proubc_baseline=>vault
      RAISING   cx_static_check.
    METHODS parse_verifyproofrequest
      IMPORTING iv_prefix                 TYPE string
      RETURNING VALUE(verifyproofrequest) TYPE z100085_zif_proubc_baseline=>verifyproofrequest
      RAISING   cx_static_check.
    METHODS parse_wallet
      IMPORTING iv_prefix     TYPE string
      RETURNING VALUE(wallet) TYPE z100085_zif_proubc_baseline=>wallet
      RAISING   cx_static_check.
    METHODS parse_witness
      IMPORTING iv_prefix      TYPE string
      RETURNING VALUE(witness) TYPE z100085_zif_proubc_baseline=>witness
      RAISING   cx_static_check.
    METHODS parse_workgroup
      IMPORTING iv_prefix        TYPE string
      RETURNING VALUE(workgroup) TYPE z100085_zif_proubc_baseline=>workgroup
      RAISING   cx_static_check.
    METHODS parse_workgroupconfig
      IMPORTING iv_prefix              TYPE string
      RETURNING VALUE(workgroupconfig) TYPE z100085_zif_proubc_baseline=>workgroupconfig
      RAISING   cx_static_check.
    METHODS parse_workflow
      IMPORTING iv_prefix       TYPE string
      RETURNING VALUE(workflow) TYPE z100085_zif_proubc_baseline=>workflow
      RAISING   cx_static_check.
    METHODS parse_listconnectors
      IMPORTING iv_prefix                      TYPE string
      RETURNING VALUE(response_listconnectors) TYPE z100085_zif_proubc_baseline=>response_listconnectors
      RAISING   cx_static_check.
    METHODS parse_listtokens
      IMPORTING iv_prefix                  TYPE string
      RETURNING VALUE(response_listtokens) TYPE z100085_zif_proubc_baseline=>response_listtokens
      RAISING   cx_static_check.
    METHODS parse_listusers
      IMPORTING iv_prefix                 TYPE string
      RETURNING VALUE(response_listusers) TYPE z100085_zif_proubc_baseline=>response_listusers
      RAISING   cx_static_check.
    METHODS parse_listworkgroups
      IMPORTING iv_prefix                      TYPE string
      RETURNING VALUE(response_listworkgroups) TYPE z100085_zif_proubc_baseline=>response_listworkgroups
      RAISING   cx_static_check.
    METHODS parse_listworkgroupusers
      IMPORTING iv_prefix                          TYPE string
      RETURNING VALUE(response_listworkgroupusers) TYPE z100085_zif_proubc_baseline=>response_listworkgroupusers
      RAISING   cx_static_check.
    METHODS set_bearer_token IMPORTING iv_tokenstring TYPE string.
    METHODS get_bearer_token
      RAISING cx_static_check.
    METHODS set_bpi_token IMPORTING iv_tokenstring TYPE string.
    METHODS get_bpi_token
      RAISING cx_static_check.
ENDCLASS.



CLASS z100085_zcl_proubc_baseline IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
    lv_bpitenant_url = iv_bpitenant_url.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2 ).
    IF sy-subrc = 0.
      mi_client->receive(    EXCEPTIONS
        http_communication_failure = 1
        http_invalid_state         = 2
        http_processing_failed     = 3 ).
      IF sy-subrc NE 0.
        rv_code = 500.
      ENDIF.
    ELSE.
      rv_code = 500.
    ENDIF.
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_account.
    account-id = mo_json->value_string( iv_prefix && '/id' ).
    account-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    account-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    account-user_id = mo_json->value_string( iv_prefix && '/user_id' ).
    account-vault_id = mo_json->value_string( iv_prefix && '/vault_id' ).
    account-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    account-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
    account-address = mo_json->value_string( iv_prefix && '/address' ).
  ENDMETHOD.

  METHOD parse_associateworkgroupuserre.
    associateworkgroupuserrequest-user_id = mo_json->value_string( iv_prefix && '/user_id' ).
  ENDMETHOD.

  METHOD parse_authenticationrequest.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_authenticationresponse.
    "TODO parse the user and token
    "authenticationresponse-user = parse_user( iv_prefix && '/user' ).
    "authenticationresponse-token = parse_token( iv_prefix && '/token' ).
    authenticationresponse-user = ''.
    authenticationresponse-token = ''.
  ENDMETHOD.

  METHOD parse_baselinerecord.
    baselinerecord-baseline_id = mo_json->value_string( iv_prefix && '/baseline_id' ).
    baselinerecord-id = mo_json->value_string( iv_prefix && '/id' ).
    baselinerecord-type = mo_json->value_string( iv_prefix && '/type' ).
    baselinerecord-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
    "TODO parse the workflow data
    "baselinerecord-workflow = parse_workflow( iv_prefix && '/workflow' ).
    baselinerecord-workflow = ''.
  ENDMETHOD.

  METHOD parse_businessobject.
    businessobject-type = mo_json->value_string( iv_prefix && '/type' ).
    businessobject-id = mo_json->value_string( iv_prefix && '/id' ).
  ENDMETHOD.

  METHOD parse_chainspec.
    chainspec-config = mo_json->value_string( iv_prefix && '/config' ).
    chainspec-coinbase = mo_json->value_string( iv_prefix && '/coinbase' ).
    chainspec-difficulty = mo_json->value_string( iv_prefix && '/difficulty' ).
    chainspec-extradata = mo_json->value_string( iv_prefix && '/extraData' ).
    chainspec-gaslimit = mo_json->value_string( iv_prefix && '/gasLimit' ).
    chainspec-nonce = mo_json->value_string( iv_prefix && '/nonce' ).
    chainspec-mixhash = mo_json->value_string( iv_prefix && '/mixhash' ).
    chainspec-parenthash = mo_json->value_string( iv_prefix && '/parentHash' ).
    chainspec-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
  ENDMETHOD.

  METHOD parse_circuit.
    circuit-id = mo_json->value_string( iv_prefix && '/id' ).
    circuit-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    circuit-vault_id = mo_json->value_string( iv_prefix && '/vault_id' ).
    circuit-proving_key_id = mo_json->value_string( iv_prefix && '/proving_key_id' ).
    circuit-verifying_key_id = mo_json->value_string( iv_prefix && '/verifying_key_id' ).
    circuit-name = mo_json->value_string( iv_prefix && '/name' ).
    circuit-description = mo_json->value_string( iv_prefix && '/description' ).
    circuit-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
    circuit-provider = mo_json->value_string( iv_prefix && '/provider' ).
    circuit-proving_scheme = mo_json->value_string( iv_prefix && '/proving_scheme' ).
    circuit-curve = mo_json->value_string( iv_prefix && '/curve' ).
    circuit-status = mo_json->value_string( iv_prefix && '/status' ).
    circuit-store_id = mo_json->value_string( iv_prefix && '/store_id' ).
  ENDMETHOD.

  METHOD parse_compiledartifact.
    compiledartifact-contractname = mo_json->value_string( iv_prefix && '/contractName' ).
* todo, array, abi
    compiledartifact-bytecode = mo_json->value_string( iv_prefix && '/bytecode' ).
    compiledartifact-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_config.
    config-counterparties = parse_participant( iv_prefix && '/counterparties' ).
    config-env = mo_json->value_string( iv_prefix && '/env' ).
    config-errors = mo_json->value_string( iv_prefix && '/errors' ).
    config-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    config-organization_address = mo_json->value_string( iv_prefix && '/organization_address' ).
    config-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    config-organization_refresh_token = mo_json->value_string( iv_prefix && '/organization_refresh_token' ).
    config-registry_contract_address = mo_json->value_string( iv_prefix && '/registry_contract_address' ).
  ENDMETHOD.

  METHOD parse_connector.
    connector-id = mo_json->value_string( iv_prefix && '/id' ).
    connector-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    connector-workgroup_id = mo_json->value_string( iv_prefix && '/workgroup_id' ).
    connector-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    connector-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    connector-name = mo_json->value_string( iv_prefix && '/name' ).
    connector-type = mo_json->value_string( iv_prefix && '/type' ).
    connector-status = mo_json->value_string( iv_prefix && '/status' ).
    connector-description = mo_json->value_string( iv_prefix && '/description' ).
    connector-config = parse_connectorconfig( iv_prefix && '/config' ).
  ENDMETHOD.

  METHOD parse_connectorconfig.
    connectorconfig-image = mo_json->value_string( iv_prefix && '/image' ).
    connectorconfig-gateway_port = mo_json->value_string( iv_prefix && '/gateway_port' ).
    connectorconfig-provider_id = mo_json->value_string( iv_prefix && '/provider_id' ).
    connectorconfig-region = mo_json->value_string( iv_prefix && '/region' ).
    connectorconfig-role = mo_json->value_string( iv_prefix && '/role' ).
    connectorconfig-rpc_port = mo_json->value_string( iv_prefix && '/rpc_port' ).
    connectorconfig-security = parse_security( iv_prefix && '/security' ).
    connectorconfig-target_id = mo_json->value_string( iv_prefix && '/target_id' ).
    connectorconfig-api_port = mo_json->value_string( iv_prefix && '/api_port' ).
    connectorconfig-api_url = mo_json->value_string( iv_prefix && '/api_url' ).
  ENDMETHOD.

  METHOD parse_contract.
    contract-id = mo_json->value_string( iv_prefix && '/id' ).
    contract-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    contract-workgroup_id = mo_json->value_string( iv_prefix && '/workgroup_id' ).
    contract-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    contract-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    contract-contract_id = mo_json->value_string( iv_prefix && '/contract_id' ).
    contract-transaction_id = mo_json->value_string( iv_prefix && '/transaction_id' ).
    contract-name = mo_json->value_string( iv_prefix && '/name' ).
    contract-address = mo_json->value_string( iv_prefix && '/address' ).
    contract-type = mo_json->value_string( iv_prefix && '/type' ).
    contract-accessed_at = mo_json->value_string( iv_prefix && '/accessed_at' ).
    contract-pubsub_prefix = mo_json->value_string( iv_prefix && '/pubsub_prefix' ).
    contract-params = parse_contractparams( iv_prefix && '/params' ).
  ENDMETHOD.

  METHOD parse_contractparams.
    contractparams-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
    contractparams-compiled_artifact = parse_compiledartifact( iv_prefix && '/compiled_artifact' ).
  ENDMETHOD.

  METHOD parse_createsealorunsealkey.
    createsealorunsealkey-key = mo_json->value_string( iv_prefix && '/key' ).
    createsealorunsealkey-validation_hash = mo_json->value_string( iv_prefix && '/validation_hash' ).
  ENDMETHOD.

  METHOD parse_credentials.
    credentials-aws_access_key_id = mo_json->value_string( iv_prefix && '/aws_access_key_id' ).
    credentials-aws_secret_access_key = mo_json->value_string( iv_prefix && '/aws_secret_access_key' ).
  ENDMETHOD.

  METHOD parse_deploycontract.
    deploycontract-id = mo_json->value_string( iv_prefix && '/id' ).
    deploycontract-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deploycontract-workgroup_id = mo_json->value_string( iv_prefix && '/workgroup_id' ).
    deploycontract-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    deploycontract-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    deploycontract-contract_id = mo_json->value_string( iv_prefix && '/contract_id' ).
    deploycontract-transaction_id = mo_json->value_string( iv_prefix && '/transaction_id' ).
    deploycontract-name = mo_json->value_string( iv_prefix && '/name' ).
    deploycontract-address = mo_json->value_string( iv_prefix && '/address' ).
    deploycontract-type = mo_json->value_string( iv_prefix && '/type' ).
    deploycontract-params = parse_contractparams( iv_prefix && '/params' ).
    deploycontract-accessed_at = mo_json->value_string( iv_prefix && '/accessed_at' ).
    deploycontract-pubsub_prefix = mo_json->value_string( iv_prefix && '/pubsub_prefix' ).
  ENDMETHOD.

  METHOD parse_derivekeyrequest.
    derivekeyrequest-nonce = mo_json->value_string( iv_prefix && '/nonce' ).
    derivekeyrequest-context = mo_json->value_string( iv_prefix && '/context' ).
    derivekeyrequest-name = mo_json->value_string( iv_prefix && '/name' ).
    derivekeyrequest-description = mo_json->value_string( iv_prefix && '/description' ).
  ENDMETHOD.

  METHOD parse_error.
    error-code = mo_json->value_string( iv_prefix && '/code' ).
    error-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_executecontractrequest.
    executecontractrequest-method = mo_json->value_string( iv_prefix && '/method' ).
* todo, array, params
    executecontractrequest-value = mo_json->value_string( iv_prefix && '/value' ).
    executecontractrequest-account_id = mo_json->value_string( iv_prefix && '/account_id' ).
  ENDMETHOD.

  METHOD parse_executecontractresponse.
    executecontractresponse-confidence = mo_json->value_string( iv_prefix && '/confidence' ).
    executecontractresponse-ref = mo_json->value_string( iv_prefix && '/ref' ).
  ENDMETHOD.

  METHOD parse_ingress.
    ingress = mo_json->value_string( iv_prefix && '/0.0.0.0/0' ).
  ENDMETHOD.

  METHOD parse_issueverifiablecredentia.
    issueverifiablecredential-address = mo_json->value_string( iv_prefix && '/address' ).
    issueverifiablecredential-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    issueverifiablecredential-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
    issueverifiablecredential-signature = mo_json->value_string( iv_prefix && '/signature' ).
  ENDMETHOD.

  METHOD parse_jwk.
    jwk-kid = mo_json->value_string( iv_prefix && '/kid' ).
    jwk-n = mo_json->value_string( iv_prefix && '/n' ).
    jwk-e = mo_json->value_string( iv_prefix && '/e' ).
    jwk-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
    jwk-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
  ENDMETHOD.

  METHOD parse_key.
    key-type = mo_json->value_string( iv_prefix && '/type' ).
    key-usage = mo_json->value_string( iv_prefix && '/usage' ).
    key-spec = mo_json->value_string( iv_prefix && '/spec' ).
    key-name = mo_json->value_string( iv_prefix && '/name' ).
    key-description = mo_json->value_string( iv_prefix && '/description' ).
    key-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
  ENDMETHOD.

  METHOD parse_lastblockheader.
    lastblockheader-difficulty = mo_json->value_string( iv_prefix && '/difficulty' ).
    lastblockheader-extradata = mo_json->value_string( iv_prefix && '/extraData' ).
    lastblockheader-gaslimit = mo_json->value_string( iv_prefix && '/gasLimit' ).
    lastblockheader-gasused = mo_json->value_string( iv_prefix && '/gasUsed' ).
    lastblockheader-hash = mo_json->value_string( iv_prefix && '/hash' ).
    lastblockheader-logsbloom = mo_json->value_string( iv_prefix && '/logsBloom' ).
    lastblockheader-miner = mo_json->value_string( iv_prefix && '/miner' ).
    lastblockheader-mixhash = mo_json->value_string( iv_prefix && '/mixHash' ).
    lastblockheader-nonce = mo_json->value_string( iv_prefix && '/nonce' ).
    lastblockheader-number = mo_json->value_string( iv_prefix && '/number' ).
    lastblockheader-parenthash = mo_json->value_string( iv_prefix && '/parentHash' ).
    lastblockheader-receiptsroot = mo_json->value_string( iv_prefix && '/receiptsRoot' ).
    lastblockheader-sha3uncles = mo_json->value_string( iv_prefix && '/sha3Uncles' ).
    lastblockheader-stateroot = mo_json->value_string( iv_prefix && '/stateRoot' ).
    lastblockheader-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
    lastblockheader-transactionsroot = mo_json->value_string( iv_prefix && '/transactionsRoot' ).
  ENDMETHOD.

  METHOD parse_loadbalancer.
    loadbalancer-id = mo_json->value_string( iv_prefix && '/id' ).
    loadbalancer-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    loadbalancer-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    loadbalancer-workgroup_id = mo_json->value_string( iv_prefix && '/workgroup_id' ).
    loadbalancer-name = mo_json->value_string( iv_prefix && '/name' ).
    loadbalancer-type = mo_json->value_string( iv_prefix && '/type' ).
    loadbalancer-host = mo_json->value_string( iv_prefix && '/host' ).
    loadbalancer-ipv4 = mo_json->value_string( iv_prefix && '/ipv4' ).
    loadbalancer-ipv6 = mo_json->value_string( iv_prefix && '/ipv6' ).
    loadbalancer-description = mo_json->value_string( iv_prefix && '/description' ).
    loadbalancer-region = mo_json->value_string( iv_prefix && '/region' ).
    loadbalancer-status = mo_json->value_string( iv_prefix && '/status' ).
  ENDMETHOD.

  METHOD parse_logmessage.
    logmessage-baseline_id = mo_json->value_string( iv_prefix && '/baseline_id' ).
    logmessage-message = mo_json->value_string( iv_prefix && '/message' ).
    logmessage-object_id = mo_json->value_string( iv_prefix && '/object_id' ).
    logmessage-severity = mo_json->value_string( iv_prefix && '/severity' ).
    logmessage-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
    logmessage-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_message.
    message-baseline_id = mo_json->value_string( iv_prefix && '/baseline_id' ).
    message-errors = mo_json->value_string( iv_prefix && '/errors' ).
    message-id = mo_json->value_string( iv_prefix && '/id' ).
    message-message_id = mo_json->value_string( iv_prefix && '/message_id' ).
    message-payload = mo_json->value_string( iv_prefix && '/payload' ).
    message-protocol_message = mo_json->value_string( iv_prefix && '/protocol_message' ).
    message-recipients = mo_json->value_string( iv_prefix && '/recipients' ).
    message-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_network.
    network-id = mo_json->value_string( iv_prefix && '/id' ).
    network-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    network-workgroup_id = mo_json->value_string( iv_prefix && '/workgroup_id' ).
    network-name = mo_json->value_string( iv_prefix && '/name' ).
    network-description = mo_json->value_string( iv_prefix && '/description' ).
    network-enabled = mo_json->value_boolean( iv_prefix && '/enabled' ).
    network-chain_id = mo_json->value_string( iv_prefix && '/chain_id' ).
    network-config = mo_json->value_string( iv_prefix && '/config' ).
  ENDMETHOD.

  METHOD parse_networkstatus.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_openidconfig.
    openidconfig-authorization_endpoint = mo_json->value_string( iv_prefix && '/authorization_endpoint' ).
* todo, array, claims_supported
    openidconfig-cloud_instance_name = mo_json->value_string( iv_prefix && '/cloud_instance_name' ).
    openidconfig-device_authorization_endpoint = mo_json->value_string( iv_prefix && '/device_authorization_endpoint' ).
    openidconfig-frontchannel_logout_supported = mo_json->value_boolean( iv_prefix && '/frontchannel_logout_supported' ).
    openidconfig-http_logout_supported = mo_json->value_boolean( iv_prefix && '/http_logout_supported' ).
* todo, array, id_token_signing_alg_values_su
    openidconfig-issuer = mo_json->value_string( iv_prefix && '/issuer' ).
    openidconfig-jwks_uri = mo_json->value_string( iv_prefix && '/jwks_uri' ).
    openidconfig-request_uri_parameter_supporte = mo_json->value_boolean( iv_prefix && '/request_uri_parameter_supported' ).
* todo, array, response_modes_supported
* todo, array, response_types_supported
* todo, array, scopes_supported
* todo, array, subject_types_supported
    openidconfig-token_endpoint = mo_json->value_string( iv_prefix && '/token_endpoint' ).
* todo, array, token_endpoint_auth_methods_su
    openidconfig-userinfo_endpoint = mo_json->value_string( iv_prefix && '/userinfo_endpoint' ).
  ENDMETHOD.

  METHOD parse_organization.
    organization-name = mo_json->value_string( iv_prefix && '/name' ).
    organization-description = mo_json->value_string( iv_prefix && '/description' ).
  ENDMETHOD.

  METHOD parse_participant.
    participant-address = mo_json->value_string( iv_prefix && '/address' ).
    participant-metadata = mo_json->value_string( iv_prefix && '/metadata' ).
    participant-api_endpoint = mo_json->value_string( iv_prefix && '/api_endpoint' ).
    participant-messaging_endpoint = mo_json->value_string( iv_prefix && '/messaging_endpoint' ).
  ENDMETHOD.

  METHOD parse_protocolmessage.
    protocolmessage-baseline_id = mo_json->value_string( iv_prefix && '/baseline_id' ).
    protocolmessage-opcode = mo_json->value_string( iv_prefix && '/opcode' ).
    protocolmessage-sender = mo_json->value_string( iv_prefix && '/sender' ).
    protocolmessage-recipient = mo_json->value_string( iv_prefix && '/recipient' ).
    protocolmessage-shield = mo_json->value_string( iv_prefix && '/shield' ).
    protocolmessage-identifer = mo_json->value_string( iv_prefix && '/identifer' ).
    protocolmessage-signature = mo_json->value_string( iv_prefix && '/signature' ).
    protocolmessage-type = mo_json->value_string( iv_prefix && '/type' ).
    "TODO parse the payload
    "protocolmessage-payload = parse_protocolmessagepayload( iv_prefix && '/payload' ).
    protocolmessage-payload = ''.
  ENDMETHOD.

  METHOD parse_protocolmessagepayload.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_proverequest.
    proverequest-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
    proverequest-proving_scheme = mo_json->value_string( iv_prefix && '/proving_scheme' ).
    proverequest-curve = mo_json->value_string( iv_prefix && '/curve' ).
    proverequest-provider = mo_json->value_string( iv_prefix && '/provider' ).
    proverequest-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_secret.
    secret-id = mo_json->value_string( iv_prefix && '/id' ).
    secret-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    secret-vault_id = mo_json->value_string( iv_prefix && '/vault_id' ).
    secret-type = mo_json->value_string( iv_prefix && '/type' ).
    secret-name = mo_json->value_string( iv_prefix && '/name' ).
    secret-description = mo_json->value_string( iv_prefix && '/description' ).
    secret-value = mo_json->value_string( iv_prefix && '/value' ).
  ENDMETHOD.

  METHOD parse_security.
    security-egress = mo_json->value_string( iv_prefix && '/egress' ).
    security-ingress = mo_json->value_string( iv_prefix && '/ingress' ).
  ENDMETHOD.

  METHOD parse_token.
    token-id = mo_json->value_string( iv_prefix && '/id' ).
    token-scope = mo_json->value_string( iv_prefix && '/scope' ).
* todo, number, expires_in
    token-access_token = mo_json->value_string( iv_prefix && '/access_token' ).
    token-refresh_token = mo_json->value_string( iv_prefix && '/refresh_token' ).
    token-token = mo_json->value_string( iv_prefix && '/token' ).
* todo, number, permissions
    token-organization_id = mo_json->value_string( iv_prefix && '/organization_id' ).
    token-application_id = mo_json->value_string( iv_prefix && '/application_id' ).
  ENDMETHOD.

  METHOD parse_transaction.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_unsealvaultrequest.
    unsealvaultrequest-key = mo_json->value_string( iv_prefix && '/key' ).
  ENDMETHOD.

  METHOD parse_user.
    user-id = mo_json->value_string( iv_prefix && '/id' ).
    user-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    user-name = mo_json->value_string( iv_prefix && '/name' ).
    user-first_name = mo_json->value_string( iv_prefix && '/first_name' ).
    user-last_name = mo_json->value_string( iv_prefix && '/last_name' ).
    user-email = mo_json->value_string( iv_prefix && '/email' ).
    user-password = mo_json->value_string( iv_prefix && '/password' ).
    user-permissions = mo_json->value_string( iv_prefix && '/permissions' ).
    user-privacy_policy_agreed_at = mo_json->value_string( iv_prefix && '/privacy_policy_agreed_at' ).
    user-terms_of_service_agreed_at = mo_json->value_string( iv_prefix && '/terms_of_service_agreed_at' ).
  ENDMETHOD.

  METHOD parse_vault.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_verifyproofrequest.
    verifyproofrequest-witness = parse_witness( iv_prefix && '/witness' ).
    verifyproofrequest-proof = mo_json->value_string( iv_prefix && '/proof' ).
    verifyproofrequest-store = mo_json->value_boolean( iv_prefix && '/store' ).
  ENDMETHOD.

  METHOD parse_wallet.
    wallet-id = mo_json->value_string( iv_prefix && '/id' ).
    wallet-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    wallet-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    wallet-user_id = mo_json->value_string( iv_prefix && '/user_id' ).
    wallet-vault_id = mo_json->value_string( iv_prefix && '/vault_id' ).
    wallet-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    wallet-purpose = mo_json->value_string( iv_prefix && '/purpose' ).
    wallet-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
  ENDMETHOD.

  METHOD parse_witness.
    witness-x = mo_json->value_string( iv_prefix && '/X' ).
    witness-y = mo_json->value_string( iv_prefix && '/Y' ).
  ENDMETHOD.

  METHOD parse_workgroup.
    workgroup-id = mo_json->value_string( iv_prefix && '/id' ).
    workgroup-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    workgroup-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
    workgroup-user_id = mo_json->value_string( iv_prefix && '/user_id' ).
    workgroup-name = mo_json->value_string( iv_prefix && '/name' ).
    workgroup-description = mo_json->value_string( iv_prefix && '/description' ).
    workgroup-type = mo_json->value_string( iv_prefix && '/type' ).
    workgroup-config = parse_workgroupconfig( iv_prefix && '/config' ).
    workgroup-hidden = mo_json->value_boolean( iv_prefix && '/hidden' ).
  ENDMETHOD.

  METHOD parse_workgroupconfig.
    workgroupconfig-baselined = mo_json->value_boolean( iv_prefix && '/baselined' ).
    workgroupconfig-webhook_secret = mo_json->value_string( iv_prefix && '/webhook_secret' ).
    workgroupconfig-network_id = mo_json->value_string( iv_prefix && '/network_id' ).
  ENDMETHOD.

  METHOD parse_workflow.
    workflow-circuits = mo_json->value_string( iv_prefix && '/circuits' ).
    workflow-identifier = mo_json->value_string( iv_prefix && '/identifier' ).
* todo, array, parcicipants
    workflow-shield = mo_json->value_string( iv_prefix && '/shield' ).
    workflow-workstep_index = mo_json->value_string( iv_prefix && '/workstep_index' ).
  ENDMETHOD.

  METHOD parse_listconnectors.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA connector TYPE Z100085_zif_proubc_baseline=>connector.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR connector.
      connector = parse_connector( iv_prefix && '/' && lv_member ).
      APPEND connector TO response_listconnectors.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_listtokens.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA token TYPE Z100085_zif_proubc_baseline=>token.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR token.
      token = parse_token( iv_prefix && '/' && lv_member ).
      APPEND token TO response_listtokens.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_listusers.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA user TYPE Z100085_zif_proubc_baseline=>user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR user.
      user = parse_user( iv_prefix && '/' && lv_member ).
      APPEND user TO response_listusers.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_listworkgroups.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA workgroup TYPE Z100085_zif_proubc_baseline=>workgroup.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR workgroup.
      workgroup = parse_workgroup( iv_prefix && '/' && lv_member ).
      APPEND workgroup TO response_listworkgroups.
    ENDLOOP.
  ENDMETHOD.

  METHOD parse_listworkgroupusers.
    DATA lt_members TYPE string_table.
    DATA lv_member LIKE LINE OF lt_members.
    DATA user TYPE Z100085_zif_proubc_baseline=>user.
    lt_members = mo_json->members( iv_prefix && '/' ).
    LOOP AT lt_members INTO lv_member.
      CLEAR user.
      user = parse_user( iv_prefix && '/' && lv_member ).
      APPEND user TO response_listworkgroupusers.
    ENDLOOP.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listaccounts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/accounts'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " OK
      WHEN 401.
        " todo, raise
      WHEN 500.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createaccount.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/accounts'.
    DATA lv_bearertoken TYPE string.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Account
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new `Account` was created
      WHEN 404 OR 403.
        " todo, raise
      WHEN 500.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getaccountdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/accounts/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " OK
        " application/json,#/components/schemas/Account
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_account( '' ).
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~authentication.

    "TODO add the code for basic auth - this code works for /tokens but not /authenticate
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/authenticate'.
    DATA lv_authpayload TYPE Z100085_zif_proubc_Ident=>authorize_access_refreshtoken.
    DATA lv_longtermrequestdata TYPE REF TO data.
    DATA lv_requeststr TYPE string.

    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_authpayload-scope = 'offline_access'.
    lv_authpayload-organization_id = iv_tenantid.

    z100085_zcl_proubc_api_helper=>copy_data_to_ref( EXPORTING is_data = lv_authpayload
                      CHANGING cr_data = lv_longtermrequestdata  ).

    lv_requeststr = /ui2/cl_json=>serialize( EXPORTING data = lv_longtermrequestdata
                                       pretty_name = /ui2/cl_json=>pretty_mode-low_case ).

    mi_client->request->set_cdata(
      EXPORTING
        data   =  lv_requeststr
*        offset = 0
*        length = -1
    ).


    me->set_bearer_token( EXPORTING iv_tokenstring = body ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Created
        " application/json,#/components/schemas/AuthenticationResponse
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_authenticationresponse( '' ).
      WHEN 401.
        " todo, raise
    ENDCASE.
  ENDMETHOD.


  METHOD Z100085_zif_proubc_baseline~bearerauthentication.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/tokens'.
    DATA lv_authpayload TYPE Z100085_zif_proubc_Ident=>authorize_access_refreshtoken.
    DATA lv_longtermrequestdata TYPE REF TO data.
    DATA lv_requeststr TYPE string.
    DATA lv_authresponsestr TYPE string.
    data lv_bpiauthreq      TYPE z100085_zif_proubc_baseline=>authenticationrequest.
    FIELD-SYMBOLS: <fs_bpiauthreq>  TYPE any,
                   <fs_bpiauthreq2> TYPE string.


    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_authpayload-scope = 'offline_access'.
    lv_authpayload-organization_id = iv_tenantid.

    z100085_zcl_proubc_api_helper=>copy_data_to_ref( EXPORTING is_data = lv_authpayload
                      CHANGING cr_data = lv_longtermrequestdata  ).

    lv_requeststr = /ui2/cl_json=>serialize( EXPORTING data = lv_longtermrequestdata
                                       pretty_name = /ui2/cl_json=>pretty_mode-low_case ).

    mi_client->request->set_cdata(
      EXPORTING
        data   =  lv_requeststr
    ).

    me->set_bearer_token( EXPORTING iv_tokenstring = body ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    "WRITE / lv_code.
    code = lv_code.
    CASE lv_code.
      WHEN 201. " Created
        lv_authresponsestr = mi_client->response->get_cdata( ).
        /ui2/cl_json=>deserialize( EXPORTING json = lv_authresponsestr CHANGING data =  apiresponse ).
        ASSIGN apiresponse->* TO FIELD-SYMBOL(<ls_data>). "dereference into field symbol
        ASSIGN COMPONENT 'ACCESS_TOKEN' OF STRUCTURE <ls_data> TO <fs_bpiauthreq>.
        ASSIGN <fs_bpiauthreq>->* TO <fs_bpiauthreq2>.
        lv_bpiauthreq = <fs_bpiauthreq2>.
        me->set_bpi_token( lv_bpiauthreq ).
      WHEN 401.
        " todo, raise authorization failure
      when 404. "check URI, BPI tenant
    ENDCASE.
  ENDMETHOD.


  METHOD Z100085_zif_proubc_baseline~listconnectors.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/connectors'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    lv_temp = public.
    CONDENSE lv_temp.
    IF public IS SUPPLIED.
      mi_client->request->set_form_field( name = 'public' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " OK
        " application/json,#/components/schemas/response_listconnectors
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_listconnectors( '' ).
      WHEN 422. " Unprocessable Entity
        " application/json,#/components/schemas/Error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_error( '' ).
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createconnector.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/connectors'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Connector
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getconnectordetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/connectors/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deleteconnector.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/connectors/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " The request was successful but did not return a response.
      WHEN 401.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getloadbalancerdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/connectors/{id}/load_balancers'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listcontracts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/contracts'.
    lv_temp = filter_tokens.
    CONDENSE lv_temp.
    IF filter_tokens IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter_tokens' value = lv_temp ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deploycontract.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/contracts'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Contract
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 422. " Unprocessable Entity.
        " application/json,#/components/schemas/Error
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        parse_error( '' ).
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getcontractdetail.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/contracts/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~executecontract.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/contracts/{id}/execute'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/ExecuteContractRequest
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " The request was successfully accepted and processing will complete\nasynchronously.\n\nThe API returns 202 Accepted if the contract execution will\nbroadcast a Transaction to the network and returns a ref, which is\nan identifier you ma
        "y use to ask for the execution status of the\nTransaction.\napplication/json; charset=UTF-8:\n  schema:\n    $ref: '#/components/schemas/ExecuteContract'\n
        " todo, raise
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listnetworks.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/networks'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    lv_temp = public.
    CONDENSE lv_temp.
    IF public IS SUPPLIED.
      mi_client->request->set_form_field( name = 'public' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createnetwork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/networks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Network
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updatenetwork.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/networks/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Network
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " The request was successful but did not return a response
        " application/json,#/components/responses/NoContent
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getnetworkstatus.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/networks/{id}/status'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listoracles.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/oracles'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createoracle.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/oracles'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getoracledetail.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/oracles/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updateoracle.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/oracles/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deleteoracle.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/oracles/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listorganizations.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/organizations'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createorganization.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/organizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Organization
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getorganizationdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/organizations/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updateorganizationdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/organizations/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Organization
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listtokens.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/tokens'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful.
        " application/json,#/components/schemas/response_listtokens
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_listtokens( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~tokenauthorization.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/tokens'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Token
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " Request successfully authorized a `Token`
        " application/json,#/components/schemas/Token
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_token( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~revoketoken.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/tokens/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listtransactions.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/transactions'.
    lv_temp = filter_contract_creations.
    CONDENSE lv_temp.
    IF filter_contract_creations IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter_contract_creations' value = lv_temp ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createtransaction.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/transactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Transaction
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~gettransactiondetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/transactions/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listusers.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/users'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
        " application/json,#/components/schemas/response_listusers
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_listusers( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createuser.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/users'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/User
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " User created
        " application/json,#/components/schemas/User
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_user( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getuserdetail.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/users/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updateuser.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/users/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/User
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
        " application/json,#/components/schemas/User
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_user( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deleteuserrequest.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/users/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " Target `User` deleted
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~unsealvault.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/unseal'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/UnsealVaultRequest
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " The request was successful but did not return a response
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listvaults.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createvault.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Vault
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listkeys.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/keys'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createkey.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/keys'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Key
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deriveakeyrequest.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/keys/{key_id}/derive'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Key
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deleteakey.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/keys/{key_id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = key_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204.
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listsecrets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/secrets'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~storesecret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/secrets'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Secret
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~retrievesecret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/secrets/{secret_id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = secret_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deletesecret.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/vaults/{id}/secrets/{secret_id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = secret_id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{secret_id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " The request was successful but did not return a response
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listwallets.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/wallets'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createwallet.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/wallets'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Wallet
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listwalletaccounts.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/wallets/{id}/accounts'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listworkgroups.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups'.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
        " application/json,#/components/schemas/response_listworkgroups
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_listworkgroups( '' ).
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createworkgroup.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Workgroup
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
        " application/json,#/components/schemas/Workgroup
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_workgroup( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listworkgroupusers.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups/{id}/users'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = page.
    CONDENSE lv_temp.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = lv_temp ).
    ENDIF.
    lv_temp = rpp.
    CONDENSE lv_temp.
    IF rpp IS SUPPLIED.
      mi_client->request->set_form_field( name = 'rpp' value = lv_temp ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
        " application/json,#/components/schemas/response_listworkgroupusers
        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
        return_data = parse_listworkgroupusers( '' ).
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~associateworkgroupuser.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups/{id}/users'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/AssociateWorkgroupUserRequest
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 201. " The request was successful and a new entity was created
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getworkgroupdetails.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updateworkgroup.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Workgroup
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 204. " The request was successful but did not return a response
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~deleteworkgroup.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/workgroups/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createbaselinebusinessobject.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/business_objects'.
    DATA: lv_requeststr  TYPE string,
          lv_responsestr TYPE string.
    DATA lv_busobjmsg TYPE REF TO data.

    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bpi_token( ).

    z100085_zcl_proubc_api_helper=>copy_data_to_ref( EXPORTING is_data = body
                  CHANGING cr_data = lv_busobjmsg  ).

    lv_requeststr = /ui2/cl_json=>serialize( EXPORTING data =  lv_busobjmsg
                                       pretty_name = /ui2/cl_json=>pretty_mode-low_case ).

    mi_client->request->set_cdata(
      EXPORTING
        data   =  lv_requeststr
    ).

    lv_code = send_receive( ).
    statuscode = lv_code.
    lv_responsestr = mi_client->response->get_cdata( ).
    apiresponsestr = lv_responsestr.
    /ui2/cl_json=>deserialize(
      EXPORTING
        json             = lv_responsestr
      CHANGING
        data             = apiresponse
    ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 202. " Accepted
        " application/json,#/components/responses/Accepted
        " todo, raise
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404. " The specified resource was not found.
      when 407. "check strust
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~updatebaselinebusinessobject.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/business_objects/{id}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/BusinessObject
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listcircuits.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/circuits'.
    IF curve IS SUPPLIED.
      mi_client->request->set_form_field( name = 'curve' value = curve ).
    ENDIF.
    IF identifier IS SUPPLIED.
      mi_client->request->set_form_field( name = 'identifier' value = identifier ).
    ENDIF.
    IF provider IS SUPPLIED.
      mi_client->request->set_form_field( name = 'provider' value = provider ).
    ENDIF.
    IF proving_scheme IS SUPPLIED.
      mi_client->request->set_form_field( name = 'proving scheme' value = proving_scheme ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~createcircuit.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/circuits'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/Circuit
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~prove.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/circuits/{id}/prove'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/ProveRequest
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 422. " The API returns a 422 status code and human-readable error message(s) if (i) the witness parameters is not provided, (ii) required circuit arguments (i.e., fields) are not included within the given witness parameter or (iii) when Circui
        "t constraints are not satisfied.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~verify.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/circuits/{id}/verify'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
* todo, set body, #/components/schemas/VerifyProofRequest
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~getstorevalue.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/circuits/{id}/store/{index}'.
    lv_temp = id.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{id}' IN lv_uri WITH lv_temp.
    lv_temp = index.
    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).
    REPLACE ALL OCCURRENCES OF '{index}' IN lv_uri WITH lv_temp.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN 401.
        " todo, raise
      WHEN 403.
        " todo, raise
      WHEN 404.
        " todo, raise
      WHEN 503.
        " todo, raise
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listwellknownkeys.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/.well-known/keys'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~listopenidconfiguration.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/.well-known/openid-configuration'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bearer_token( ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    CASE lv_code.
      WHEN 200. " The request was successful
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.



  METHOD z100085_zif_proubc_baseline~send_protocol_msg.
*https://gist.github.com/kthomas/459381e98c808febea9c1bb51408bbde
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/api/v1/protocol_messages'.
    DATA: lv_requeststr  TYPE string,
          lv_responsestr TYPE string.
    DATA lv_protocolmsg TYPE REF TO data.

    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bpi_token( ).

    z100085_zcl_proubc_api_helper=>copy_data_to_ref( EXPORTING is_data = body
                  CHANGING cr_data = lv_protocolmsg  ).

    lv_requeststr = /ui2/cl_json=>serialize( EXPORTING data =  lv_protocolmsg
                                       pretty_name = /ui2/cl_json=>pretty_mode-low_case ).

    mi_client->request->set_cdata(
      EXPORTING
        data   =  lv_requeststr
    ).

    lv_code = send_receive( ).
    statuscode = lv_code.
    lv_responsestr = mi_client->response->get_cdata( ).
    apiresponsestr = lv_responsestr.
    /ui2/cl_json=>deserialize(
      EXPORTING
        json             = lv_responsestr
      CHANGING
        data             = apiresponse
    ).
    CASE lv_code.
      WHEN 202. " The request was successful
      when 401. " check if correct token was provided or was expired
      WHEN 404. " may be more than one reason for this...
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.


    METHOD z100085_zif_proubc_baseline~send_bpiobjects_msg.
    "old version. probably not needed
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/objects'.
    DATA: lv_requeststr  TYPE string,
          lv_responsestr TYPE string.
    DATA lv_protocolmsg TYPE REF TO data.

    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    me->get_bpi_token( ).

    z100085_zcl_proubc_api_helper=>copy_data_to_ref( EXPORTING is_data = body
                  CHANGING cr_data = lv_protocolmsg  ).

    lv_requeststr = /ui2/cl_json=>serialize( EXPORTING data =  lv_protocolmsg
                                       pretty_name = /ui2/cl_json=>pretty_mode-low_case ).

    mi_client->request->set_cdata(
      EXPORTING
        data   =  lv_requeststr
    ).

    lv_code = send_receive( ).
    statuscode = lv_code.
    lv_responsestr = mi_client->response->get_cdata( ).
    apiresponsestr = lv_responsestr.
    /ui2/cl_json=>deserialize(
      EXPORTING
        json             = lv_responsestr
      CHANGING
        data             = apiresponse
    ).
    CASE lv_code.
      WHEN 202. " The request was successful
      WHEN 404. " may be more than one reason for this...
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.


  METHOD set_bearer_token.
    "todo add method implementation to retrive auth token from refresh token
    authtoken = iv_tokenstring.
  ENDMETHOD.

  METHOD get_bearer_token.
    DATA lv_bearertoken TYPE string.
    "todo check auth token is valid (not empty or expired)
    CONCATENATE 'Bearer' authtoken INTO lv_bearertoken SEPARATED BY space.
    mi_client->request->set_header_field(
      EXPORTING
        name  = 'Authorization'    " Name of the header field
        value = lv_bearertoken    " HTTP header field value
    ).
  ENDMETHOD.

  METHOD set_bpi_token.
    "todo add method implementation to retrive auth token from refresh token
    bpitoken = iv_tokenstring.
  ENDMETHOD.

  METHOD get_bpi_token.
    DATA lv_bearertoken TYPE string.
    "todo check auth token is valid (not empty or expired)
    CONCATENATE 'Bearer' bpitoken INTO lv_bearertoken SEPARATED BY space.
    mi_client->request->set_header_field(
      EXPORTING
        name  = 'Authorization'    " Name of the header field
        value = lv_bearertoken    " HTTP header field value
    ).
  ENDMETHOD.

  METHOD Z100085_zif_proubc_baseline~status.
    DATA lv_code TYPE i.
    DATA lv_temp TYPE string.
    DATA lv_uri TYPE string VALUE '/status'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    statuscode = lv_code.
  ENDMETHOD.
ENDCLASS.
